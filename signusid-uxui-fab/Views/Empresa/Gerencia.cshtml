@using AspnetCoreMvcFull.Models.Mensajes
@{
    ViewData["Title"] = "Gerencia";
}

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/datatables-bs5/datatables.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/&#64;form-validation/form-validation.css" />
}

@section VendorScripts {
    <script src="~/vendor/libs/datatables-bs5/datatables-bootstrap5.js"></script>

    <script src="~/vendor/libs/&#64;form-validation/popular.js"></script>
    <script src="~/vendor/libs/&#64;form-validation/bootstrap5.js"></script>
    <script src="~/vendor/libs/&#64;form-validation/auto-focus.js"></script>

}

@section PageScripts {
    <script src="~/js/edificios-features.js"></script>
}

@* ************** Content ************** *@




<div class="card p-3">

    @model AspnetCoreMvcFull.Models.Gerencias.GerenciaViewModel


    <h4 class="mb-1">Gerencia</h4>
    <br />
    <div class="row mb-3">


        <!-- Formulario de búsqueda -->
        <div class="row g-3">
            <!-- Formulario de búsqueda -->
            <div class="row g-3">
                <!-- Formulario de búsqueda -->
                <div class="col-12 col-md-6">
                    <form method="get" action="@Url.Action("Gerencia", "Empresa")" class="d-flex flex-column flex-md-row gap-2">
                        <!-- Select compacto para tipo de búsqueda -->
                        <div class="position-relative" style="max-width: 180px; min-width: 140px;">
                            <select name="searchType" class="form-control">
                                <option value="name" selected>Por Nombre</option>
                                <option value="description">Por Descripción</option>
                            </select>
                            <i class="fas fa-chevron-down position-absolute top-50 end-0 translate-middle-y me-3"></i>
                        </div>

                        <div class="input-group flex-grow-1">
                            <!-- Input con placeholder dinámico -->
                            <input type="text" name="search" id="searchInput" class="form-control text-truncate d-none d-sm-block"
                                   placeholder="Buscar por nombre o descripción"
                                   value="@ViewBag.SearchQuery" />
                            <input type="text" name="search" id="searchInputMobile" class="form-control text-truncate d-sm-none"
                                   placeholder="Buscar..."
                                   value="@ViewBag.SearchQuery" />

                            <!-- Botón para limpiar -->
                            <button type="button" class="btn btn-outline-secondary" id="clearSearch" title="Limpiar búsqueda">
                                <i class="fas fa-times"></i>
                            </button>

                            <!-- Botón de búsqueda -->
                            <button type="submit" class="btn btn-primary">Buscar</button>
                        </div>
                    </form>
                </div>

                <!-- Formulario de filtro -->
                <div class="col-12 col-md-6">
                    <form method="get" action="@Url.Action("Gerencia")" class="d-flex flex-column flex-md-row gap-2 align-items-md-center">
                        <div class="form-group w-100 position-relative">
                            <select id="filterAssets" name="hasAssets" class="form-control">
                                <option value="">-- Todos --</option>
                                <option value="withAssets">Con activos asignados</option>
                                <option value="withoutAssets">Sin activos asignados</option>
                            </select>
                            <i class="fas fa-chevron-down position-absolute top-50 end-0 translate-middle-y me-3"></i>
                        </div>
                        <button type="submit" class="btn btn-primary w-auto">Filtrar</button>
                    </form>
                </div>

                <!-- Botón + Nuevo Edificio (Siempre a la derecha) -->
                <div class="col-12 text-end">
                    <button id="buttonAddStates" type="button" data-bs-target="#addEdificioModal" data-bs-toggle="modal"
                            class="btn btn-primary"
                            style="white-space: nowrap;">
                        + Nuevo Edificio
                    </button>
                </div>
            </div>





            <div class="card-datatable table-responsive">
                <button id="deleteBatchBtn" class="btn btn-sm btn-danger mb-3" title="Borrar en batch" disabled data-bs-toggle="modal" data-bs-target="#deleteModal">
                    <i class="fas fa-trash"></i>
                </button>
                <table class="datatables-basic table">
                    <thead>
                        <tr>
                            <th><input type="checkbox" id="select_all" /></th>
                            <th class="d-none">ID</th>
                            <th>
                                <a style="color: black; text-decoration: none;" href="@Url.Action("Gerencia", new { sortColumn = "name", sortDirection = ViewBag.SortColumn == "name" && ViewBag.SortDirection == "asc" ? "desc" : "asc", page = Model.CurrentPage, search = ViewBag.SearchQuery })">
                                    Nombre @if (ViewBag.SortColumn == "name")
                                    {
                                        <i class="fas fa-sort-@ViewBag.SortDirection"></i>
                                    }
                                </a>
                            </th>
                            <th>
                                <a style="color: black; text-decoration: none;" href="@Url.Action("Gerencia", new { sortColumn = "description", sortDirection = ViewBag.SortColumn == "description" && ViewBag.SortDirection == "asc" ? "desc" : "asc", page = Model.CurrentPage, search = ViewBag.SearchQuery })">
                                    Descripción @if (ViewBag.SortColumn == "description")
                                    {
                                        <i class="fas fa-sort-@ViewBag.SortDirection"></i>
                                    }
                                </a>
                            </th>
                            <th>
                                <a style="color: black; text-decoration: none;" href="@Url.Action("Gerencia", new { sortColumn = "assignatedAssets", sortDirection = ViewBag.SortColumn == "assignatedAssets" && ViewBag.SortDirection == "asc" ? "desc" : "asc", page = Model.CurrentPage, search = ViewBag.SearchQuery })">
                                    Activos @if (ViewBag.SortColumn == "Activos")
                                    {
                                        <i class="fas fa-sort-@ViewBag.SortDirection"></i>
                                    }
                                </a>
                            </th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var edificio in Model.Gerencias)
                        {
                            <tr>
                                <td>
                                    <input type="checkbox" class="checkbox-item" data-id="@edificio.IdLogicoA" />
                                </td>
                                <td class="d-none">@edificio.IdLogicoA</td>
                                <td>@edificio.Nombre</td>
                                <td>@edificio.Descripcion</td>
                                <td>@edificio.Activos</td>
                                <td>
                                    <div class="btn-container">
                                        <a class="btn btn-sm btn-primary btn-edit"
                                           title="Editar"
                                           data-id="@edificio.IdLogicoA"
                                           data-name="@edificio.Nombre"
                                           data-description="@edificio.Descripcion">
                                            <i class="fas fa-edit text-white"></i>
                                        </a>

                                        <button class="btn btn-sm btn-danger" title="Borrar"
                                                data-bs-toggle="modal" data-bs-target="#deleteModal"
                                                data-id-edificio="@edificio.IdLogicoA"
                                                data-name="@edificio.Nombre" data-assets="@edificio.Activos">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>



                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <style>
                /* Contenedor de los botones */
                .btn-container {
                    display: flex;
                    justify-content: start;
                    gap: 10px; /* Espacio entre los botones */
                    flex-wrap: wrap; /* Permite que los botones se apilen en pantallas pequeñas */
                }

                    /* Los botones no deben apilarse hasta que la pantalla sea pequeña */
                    .btn-container .btn {
                        margin-bottom: 5px; /* Espacio vertical entre los botones si se apilan */
                    }

            </style>
            <!-- Paginación -->
            <!-- Contenedor de paginación responsivo -->
            <nav aria-label="Page navigation">
                <div class="d-flex flex-column flex-sm-row justify-content-between align-items-center">
                    <!-- Información de la página actual -->
                    <div class="pagination-info mb-2 mb-sm-0">
                        <span>Página @Model.CurrentPage de @Model.TotalPages</span>
                    </div>

                    <!-- Paginación -->
                    <ul class="pagination flex-wrap justify-content-center justify-content-sm-end">
                        <!-- Ir a la primera página -->
                        @if (Model.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Gerencia", new { page = 1, hasAssets = ViewContext.HttpContext.Request.Query["hasAssets"], search = Model.search })" aria-label="First">
                                    <span aria-hidden="true">&laquo;&laquo;</span>
                                </a>
                            </li>
                        }

                        <!-- Ir a la página anterior -->
                        @if (Model.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Gerencia", new { page = Model.CurrentPage - 1, hasAssets = ViewContext.HttpContext.Request.Query["hasAssets"], search = Model.search })" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                        }

                        <!-- Mostrar números de páginas -->
                        @for (var i = 1; i <= Model.TotalPages; i++)
                        {
                            @if (i == 1 || i == Model.TotalPages || (i >= Model.CurrentPage - 2 && i <= Model.CurrentPage + 2))
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Gerencia", new { page = i, hasAssets = ViewContext.HttpContext.Request.Query["hasAssets"], search = Model.search })">@i</a>
                                </li>
                            }

                            @if (i == Model.CurrentPage + 2 && Model.CurrentPage + 2 < Model.TotalPages)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                        }

                        <!-- Ir a la página siguiente -->
                        @if (Model.CurrentPage < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Gerencia", new { page = Model.CurrentPage + 1, hasAssets = ViewContext.HttpContext.Request.Query["hasAssets"], search = Model.search })" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        }

                        <!-- Ir a la última página -->
                        @if (Model.CurrentPage < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Gerencia", new { page = Model.TotalPages, hasAssets = ViewContext.HttpContext.Request.Query["hasAssets"], search = Model.search })" aria-label="Last">
                                    <span aria-hidden="true">&raquo;&raquo;</span>
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </nav>



        </div>


        <script>
            const eliminarIndividualEmpresaUrl = '@Url.Action("EliminarIndividual", "Empresa")';
            const eliminarBatchEmpresaUrl = '@Url.Action("EliminarBatch", "Empresa")';
        </script>


        <!-- Modal de confirmación -->
        <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteModalLabel">Confirmar eliminación</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" id="deleteModalBody">
                        <!-- Este texto se actualizará dinámicamente -->
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                        <a id="confirmDeleteBtn" class="btn btn-danger d-none" href="#">Borrar</a>
                    </div>
                </div>
            </div>
        </div>

        @{
            AlertMessage? alertMessage = null;

            if (TempData["Alert"] is string alertJson)
            {
                try
                {
                    alertMessage = System.Text.Json.JsonSerializer.Deserialize<AlertMessage>(alertJson);
                    TempData.Remove("Alert");
                }
                catch { alertMessage = null; }
            }
        }

        @if (alertMessage != null)
        {
            var jsonAlert = Json.Serialize(alertMessage); // serializa para usarlo en JS

            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    var alertData = @Html.Raw(jsonAlert);
                    console.log("SCRIPT DE ALERTA ACTIVADO");
                    console.log(alertData);
                    var deleteModalLabel = document.getElementById('deleteModalLabel');
                    var deleteModalBody = document.getElementById('deleteModalBody');
                    var confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

                    deleteModalLabel.textContent = (alertData.tipo.toLowerCase() === "success") ? "Éxito" : "Error";
                    deleteModalBody.innerHTML = alertData.mensaje;
                    confirmDeleteBtn.classList.add('d-none');

                    var deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
                    deleteModal.show();

                    document.getElementById('deleteModal').addEventListener('hidden.bs.modal', function () {
                        history.replaceState(null, '', window.location.pathname);
                    });
                });
            </script>
        }


        <script>
            const fill_selected_state_data = (name, description) => {
              // Actualizar los campos del formulario con los valores seleccionados
              document.getElementById("name").value = name;
              document.getElementById("description").value = description;
            };

            function setupEditContext(element, name, description) {
              const form = document.getElementById("addStateModal");
              form.setAttribute("data-context", "edit");
              fill_selected_state_data(name, description);

            }

        </script>

        <!-- Modal de alerta -->
        <div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title" id="alertModalLabel">Mensaje</h5>
                        <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                    </div>
                    <div class="modal-body" id="alertModalBody">
                        <!-- Aquí va el mensaje dinámico -->
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>

        @{
            var alertMessage2 = TempData["Alert2"] as string;
        }
        @if (!string.IsNullOrEmpty(alertMessage2))
        {
            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    const alertModalBody = document.getElementById("alertModalBody");
                    alertModalBody.textContent = "@alertMessage2";

                    const alertModal = new bootstrap.Modal(document.getElementById("alertModal"));
                    alertModal.show();
                });
            </script>
            TempData.Remove("Alert2");
        }

        <style>
            #alertModal .modal-header.bg-primary {
                background-color: #7961f0 !important;
            }
        </style>
    </div>
</div>
<div class="alert alert-primary text-center" role="alert">
    <i class="fa fa-building me-2"></i>
    Total de edificios registrados: <strong>@ViewBag.TotalGerencias</strong>
</div>
<br />
<div class="card">
    <h5 class="card-header h3 mb-2">Sincronización</h5>
    <div class="card-body mb-3">
        <form asp-controller="Empresa" asp-action="SincronizarGerencia" method="post" enctype="multipart/form-data">
            <div class="row g-3 align-items-end">
                <div class="col-md-6">
                    <label for="excelFile" class="form-label">Subir archivo Excel (.xlsx):</label>
                    <input type="file" name="excelFile" id="excelFile" accept=".xlsx" class="form-control" required />
                </div>
                <div class="col-md-3">
                    <button type="submit" class="btn btn-primary-purple w-100">
                        <i class="fa fa-upload me-1"></i> Sincronizar Gerencias
                    </button>
                </div>
            </div>
        </form>
    </div>

    <style>
        .btn-primary-purple {
            background-color: #7961f0 !important; /* Morado personalizado */
            border-color: #7961f0 !important;
            color: white;
        }

            .btn-primary-purple:hover {
                background-color: #6650e0 !important;
                border-color: #6650e0 !important;
                color: white;
            }
    </style>


</div>

@await Html.PartialAsync("../_Partials/_Modals/ModalAddEdificio")
@await Html.PartialAsync("../_Partials/_Modals/ModalEditEdificio")
