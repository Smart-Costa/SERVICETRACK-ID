@* Contactos.cshtml *@
@{
    ViewData["Title"] = "Contactos";
}

@{
    var http = ViewContext?.HttpContext;
    var query = http?.Request?.Query;

    var page = Model?.CurrentPage ?? (query != null && int.TryParse(query["page"], out var p) ? p : 1);
    var pageSize = Model?.PageSize ?? (query != null && int.TryParse(query["pageSize"], out var ps) ? ps : 5);
    var total = Model?.TotalItems ?? 0;
    var totalPages = Math.Max(1, (int)Math.Ceiling((double)total / Math.Max(1, pageSize)));
    var q = Model?.Query ?? (query?["q"].ToString() ?? "");
    var todos = query?["todos"].ToString() ?? "";

    var from = total == 0 ? 0 : ((page - 1) * pageSize + 1);
    var to = total == 0 ? 0 : Math.Min(page * pageSize, total);
}

@model AspnetCoreMvcFull.Models.Empresa.ContactosIndexVm


<div class="card" style="padding: 1rem 1rem 1rem 1rem;">
    <div class="col-12 col-md-auto">
        <h4 class="mb-0" style="color:#606060">Contactos</h4>
    </div>

    <div class="p-3 rounded mb-4" style="border: 1px solid #d6d6d6;">

        @* <-- borde suave que encierra TODO menos el título *@
        <form id="formContactos" asp-controller="Empresa" asp-action="GuardarContactos" method="post" novalidate>

            <input type="hidden" name="estadoFomrulario"
                   value="@(Model?.FormData?.IdContacto != Guid.Empty ? "Editar" : "Insertar")" />
            <input type="hidden" name="IdContacto"
                   value="@(Model?.FormData?.IdContacto != Guid.Empty ? Model.FormData.IdContacto : Guid.Empty)" />
            <input type="hidden" name="page" value="@(Model?.CurrentPage ?? 1)" />
            <input type="hidden" name="pageSize" value="@(Model?.PageSize ?? 5)" />

            @Html.AntiForgeryToken()

            <div class="row g-4">
                <!-- Fila 1 -->
                <div class="col-12 col-md-3">
                    <label for="Nombre" class="form-label">Nombre</label>
                    <input id="Nombre" name="Nombre" class="form-control" value="@Model?.FormData?.Nombre" />
                    <div id="errNombre" class="field-error text-danger small"></div>
                </div>
                <div class="col-12 col-md-3">
                    <label for="Apellidos" class="form-label">Apellidos</label>
                    <input id="Apellidos" name="Apellidos" class="form-control" value="@Model?.FormData?.Apellidos" />
                </div>
                <div class="col-12 col-md-6">
                    <label for="DireccionContacto" class="form-label">Dirección</label>
                    <input id="Direccion" name="Direccion" class="form-control" value="@Model?.FormData?.Direccion" />
                    <div id="errDireccion" class="field-error text-danger small"></div>
                </div>

                <!-- Fila 2 -->
                <div class="col-12 col-md-3">
                    <label for="IdentificacionERelacionada" class="form-label">Identificación</label>
                    <input id="IdentificacionContacto" name="IdentificacionContacto" class="form-control" value="@Model?.FormData?.IdentificacionContacto" />
                </div>
                <div class="col-12 col-md-3">
                    <label for="EmpresaRelacionada" class="form-label">Empresa</label>
                    <select id="EmpresaRelacionadaId" name="EmpresaRelacionadaId"
                            class="form-select"
                            style="appearance:none;-webkit-appearance:none;-moz-appearance:none;background-image:none;">
                        <option value="">Seleccione una empresa</option>
                        @foreach (var opt in Model.EmpresasOptions)
                        {
                            <option value="@opt.Value"
                                    selected="@(Model?.FormData?.EmpresaRelacionadaId?.ToString() == opt.Value ? "selected" : null)">
                                @opt.Text
                            </option>
                        }
                    </select>
                </div>
                <div class="col-12 col-md-6">
                    <label for="DireccionERelacionada" class="form-label">Dirección (opcional)</label>
                    <input id="DireccionOpcional" name="DireccionOpcional" class="form-control" value="@Model?.FormData?.DireccionOpcional" />
                </div>

                <!-- Fila 3 -->
                <div class="col-12 col-md-3">
                    <label for="Email" class="form-label">Email</label>
                    <input id="Email" name="Email" type="email" class="form-control" value="@Model?.FormData?.Email" />
                    <div id="errEmail" class="field-error text-danger small"></div>
                </div>
                <div class="col-12 col-md-3">
                    <label for="Telefono" class="form-label">Teléfono</label>
                    <input id="Telefono" name="Telefono" class="form-control" value="@Model?.FormData?.Telefono" />
                </div>
                <div class="col-12 col-md-3">
                    <label for="Pais" class="form-label">País*</label>
                    <select id="Pais" name="Pais" class="form-select select-light">
                        <option value="">Seleccione un elemento</option>
                    </select>
                    <div id="errPais" class="field-error text-danger small"></div>
                </div>
     
                <div class="col-12 col-md-3">
                    <label for="Estado" class="form-label">Estado</label>
                    <select id="Estado" name="Estado" class="form-select select-light">
                        <option value="">Seleccione un elemento</option>
                    </select>
                </div>

                <!-- Fila 4 -->
                <div class="col-12 col-md-3">
                    <label for="Puesto" class="form-label">Puesto</label>
                    <input id="Puesto" name="Puesto" class="form-control" value="@Model?.FormData?.Puesto" />
                </div>
                <div class="col-12 col-md-3">
                    <label for="TelefonoMovil" class="form-label">Teléfono Móvil</label>
                    <input id="TelefonoMovil" name="TelefonoMovil" class="form-control" value="@Model?.FormData?.TelefonoMovil" />
                </div>
                <div class="col-12 col-md-3">
                    <label for="CodigoPostal" class="form-label">Código Postal</label>
                    <input id="CodigoPostal" name="CodigoPostal" class="form-control" value="@Model?.FormData?.CodigoPostal" />
                </div>

                <div class="col-12 col-md-3">
                    <label for="Ciudad" class="form-label">Ciudad</label>
                    <select id="Ciudad" name="Ciudad" class="form-select select-light">
                        <option value="">Seleccione un elemento</option>
                    </select>
                </div>

            </div>

           

            <!-- Fila final -->
            <div class="row g-3 align-items-end mt-3">
                <div class="col-12 col-md-3">
                    <div class="row g-3">
                        <div class="col-6">
                            <select id="Estatus" name="Estatus" class="form-select">
                                <option value="" selected="@(string.IsNullOrEmpty(Model?.FormData?.Estatus) ? "selected" : null)" hidden>Estatus</option>
                                <option value="Activo" selected="@(Model?.FormData?.Estatus == "Activo" ? "selected" : null)">Activo</option>
                                <option value="Inactivo" selected="@(Model?.FormData?.Estatus == "Inactivo" ? "selected" : null)">Inactivo</option>
                            </select>
                        </div>
                        <div class="col-6">
                            <input id="Identificacion" name="Identificacion" class="form-control"
                                   placeholder="Identificación"
                                   value="@Model?.FormData?.Identificacion"
                                   type="text"
                                   inputmode="numeric"
                                   pattern="[0-9]*"
                                   maxlength="7"
                                   oninput="this.value=this.value.replace(/[^0-9]/g,'').slice(0,7)" />

                        </div>
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-center gap-3 mt-4">
                <button type="submit" class="btn text-white" style="background-color:#FF5100;border-color:#FF5100;">
                    Guardar
                </button>
                <a asp-action="Contactos" class="btn btn-secondary">Cancelar</a>
            </div>
        </form>

    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
          const form = document.getElementById("formContactos");
          if (!form) return;

          // Helpers para mostrar/limpiar errores
          const setErr = (id, msg) => { const el = document.getElementById(id); if (el) el.textContent = msg || ""; };

          form.addEventListener("submit", function (e) {
            let ok = true;

            // Limpia mensajes previos
            document.querySelectorAll(".field-error").forEach(div => div.textContent = "");

            // Nombre
            const nombre = form.querySelector("#Nombre")?.value?.trim() || "";
            if (!nombre) { setErr("errNombre", "Obligatorio"); ok = false; }

            // Dirección
            const dir = form.querySelector("#Direccion")?.value?.trim() || "";
            if (!dir) { setErr("errDireccion", "Obligatorio"); ok = false; }

            // Email
            const email = form.querySelector("#Email")?.value?.trim() || "";
            if (!email) { setErr("errEmail", "Obligatorio"); ok = false; }

            // País
            const pais = form.querySelector("#Pais")?.value?.trim() || "";
            if (!pais) { setErr("errPais", "Obligatorio"); ok = false; }

            if (!ok) e.preventDefault(); // <- detiene el POST
          });
        });
    </script>


    <script>
        document.addEventListener('DOMContentLoaded', async () => {
          const prePais   = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model?.FormData?.Pais ?? ""));
          const preEstado = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model?.FormData?.Estado ?? ""));
          const preCiudad = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model?.FormData?.Ciudad ?? ""));

          // Reutiliza tus funciones existentes
          if (typeof loadCountries === 'function') {
            await loadCountries('Pais', prePais);
            await loadStates('Pais', 'Estado', preEstado);
            await loadCities('Pais', 'Estado', 'Ciudad', preCiudad);
          } else {
            // si no tienes helpers, al menos setea valores directos (si ya existen en <option>)
            const pais   = document.getElementById('Pais');
            const estado = document.getElementById('Estado');
            const ciudad = document.getElementById('Ciudad');
            if (pais && prePais) pais.value = prePais;
            if (estado && preEstado) estado.value = preEstado;
            if (ciudad && preCiudad) ciudad.value = preCiudad;
          }
        });
    </script>


    @{
        var qVal = Model?.Query ?? Context?.Request?.Query["q"].ToString();
        var todosVal = Model?.Todos ?? Context?.Request?.Query["todos"].ToString();
        var estatusVal = Model?.EstatusFilter ?? Context?.Request?.Query["estatus"].ToString();
        var pageSizeCurrent = Model?.PageSize ?? 5;
    }

    <form asp-controller="Empresa" asp-action="Contactos" method="get">

        <!-- AQUI DEBERIAN DE IR LOS FILTROS -->
        <!-- FILTROS: Fila 1 -->
        <div class="row gx-2 gy-2 align-items-center mb-2">
            <!-- IZQUIERDA (más ancha) -->
            <div class="col-12 col-lg-9">
                <div class="row gx-2 gy-2 align-items-center">
                    <!-- Empresa (se expande) -->
                    <div class="col">
                        <input type="text" name="q" value="@Model.Query" class="form-control" placeholder="Contacto" />
                    </div>


                    <!-- Buscar (tamaño contenido) -->
                    <div class="col-auto">
                        <button type="submit" name="cmd" value="buscar"
                                class="btn text-white"
                                style="background-color:#FF5100;border-color:#FF5100; white-space:nowrap;">
                            Buscar
                        </button>
                    </div>

                    <!-- ---Todos--- como select sin flecha -->
                    <div class="col">
                        <select id="estatus" name="estatus" class="form-select no-caret">
                            <option value="" selected="@(string.IsNullOrEmpty(Model.EstatusFilter) ? "selected" : null)">---Todos---</option>
                            <option value="Activo" selected="@(Model.EstatusFilter == "Activo" ? "selected" : null)">Activo</option>
                            <option value="Inactivo" selected="@(Model.EstatusFilter == "Inactivo" ? "selected" : null)">Inactivo</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- DERECHA: Filtrar + Limpiar alineados a la derecha -->
            <div class="col-12 col-lg-3">
                <div class="d-flex justify-content-lg-end align-items-center gap-2">
                    <button type="submit" name="cmd" value="filtrar"
                            class="btn text-white"
                            style="background-color:#FF5100;border-color:#FF5100;">
                        Filtrar
                    </button>
                    <a href="@Url.Action("Contactos", new { page = 1, pageSize = Model.PageSize })"
                       class="btn btn-secondary">Limpiar Filtro</a>
                </div>
            </div>
        </div>




        <!-- FILTROS: Fila 2 (alineada con la fila 1: 9/3) -->
        <div class="row align-items-center mb-2">
            <div class="col-12 col-lg-9 d-flex flex-wrap align-items-center gap-2">
                <span>Mostrar</span>
                <select id="pageSize" name="pageSize"
                        class="form-select form-select-sm w-auto"
                        onchange="this.form.submit()">
                    <option value="1" selected="@(pageSizeCurrent == 1 ? "selected" : null)">1</option>
                    <option value="5" selected="@(pageSizeCurrent == 5 ? "selected" : null)">5</option>
                    <option value="10" selected="@(pageSizeCurrent == 10 ? "selected" : null)">10</option>
                    <option value="20" selected="@(pageSizeCurrent == 20 ? "selected" : null)">20</option>
                </select>

                <span>Contactos</span>
            </div>

            <div class="col-12 col-lg-3 d-flex justify-content-lg-end mt-2 mt-lg-0">
                <a asp-controller="Empresa" asp-action="Empresas"
                   class="btn text-white"
                   style="background-color:#FF5100;border-color:#FF5100;">
                    <span class="fw-bold me-2">+</span> Registrar Empresa
                </a>
            </div>
        </div>




        <!-- AQUI DEBERIAN DE IR LOS FILTROS -->

        <div class="card-datatable table-responsive border" style="padding: .5rem;">
            <style>
                .card-datatable {
                    border: 1px solid #dee2e6;
                    border-radius: 8px;
                    overflow: hidden;
                    background: #fff
                }

                    .card-datatable table {
                        border-bottom: 1px solid #dee2e6
                    }
                /* ancho y centrado del checkbox */
                .w-5 {
                    width: 5%
                }

                .w-10 {
                    width: 10%
                }

                .w-20 {
                    width: 20%
                }

                .w-35 {
                    width: 35%
                }

                .w-50 {
                    width: 50%
                }

                .text-center {
                    text-align: center
                }

                table th,
                table td {
                    white-space: nowrap; /* No permite saltos de línea dentro de la celda */
                    overflow: visible !important;
                    text-overflow: unset !important;
                    max-width: none !important; /* Evita que se limite el ancho */
                }

                .table-responsive {
                    overflow-x: auto;
                }
            </style>
            <div class="table-responsive table-scroll">
                <table class="datatables-basic table table-stretch">
                    <thead>
                        <tr>
                            <th>Nombre de contacto</th>
                   
                            <th>País </th>
                            <th>Teléfono</th>
                            <th>Tel.Móvil</th>
                            <th>Email</th>
                            <th class="text-end">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model?.Items != null && Model.Items.Any())
                        {
                            foreach (var item in Model.Items)
                            {
                                <tr>
                                    <td class="text-truncate" style="font-size:12.5px">@item.Nombre</td>
                                    <td class="text-truncate d-none d-md-table-cell" style="font-size:12.5px">@item.Pais</td>
                                    <td class="text-truncate d-none d-lg-table-cell" style="font-size:12.5px">@item.Telefono</td>
                                    <td class="text-truncate d-none d-sm-table-cell" style="font-size:12.5px">@item.TelefonoMovil</td>
                                    <td class="text-truncate d-none d-sm-table-cell" style="font-size:12.5px">@item.Email</td>
                                    <td class="text-end">
                                        <div class="d-inline-flex gap-2">
                                            <a class="btn d-flex align-items-center justify-content-center p-1 px-2"
                                               title="Editar"
                                               asp-controller="Empresa"
                                               asp-action="EditarContacto"
                                               asp-route-id="@item.IdContacto"
                                               asp-route-page="@(Model?.CurrentPage ?? 1)"
                                               asp-route-pageSize="@(Model?.PageSize ?? 5)"
                                               asp-route-q="@(Model?.Query)"
                                               asp-route-todos="@(Model?.Todos)"
                                               asp-route-estatus="@(Model?.EstatusFilter)"
                                               style="background-color:#00A5B8;border:none;border-radius:6px;height:28px;min-width:40px;">
                                                <img src="~/img/editar_icono.svg" alt="Editar" style="width:16px;height:16px;">
                                            </a>

                                            <button type="button"
                                                    class="btn d-flex align-items-center justify-content-center p-1 px-2"
                                                    title="Borrar"
                                                    data-bs-toggle="modal"
                                                    data-bs-target="#contactoDeleteModal"
                                                    data-id="@item.IdContacto"
                                                    data-nombre="@($"{item.Nombre} {item.Apellidos}".Trim())"
                                                    style="background-color:#666;border:none;border-radius:6px;height:28px;min-width:40px;">
                                                <img src="~/img/eliminar_icono.svg" alt="Eliminar" style="width:16px;height:16px;">
                                            </button>

                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center text-muted py-4">Sin resultados.</td>
                            </tr>
                        }
                    </tbody>

                </table>
            </div>


            @{
                var page = Model?.CurrentPage ?? 1;
                var pageSize = Model?.PageSize ?? 5;
                var total = Model?.TotalItems ?? 0;
                var totalPages = Math.Max(1, (int)Math.Ceiling((double)total / Math.Max(1, pageSize)));
                var q = Model?.Query ?? "";

                // Si tienes más filtros en el querystring, captúralos aquí para preservarlos:
                var todos = Context?.Request?.Query["todos"].ToString() ?? "";

                var from = total == 0 ? 0 : ((page - 1) * pageSize + 1);
                var to = total == 0 ? 0 : Math.Min(page * pageSize, total);
            }

            <div class="d-flex justify-content-end mt-2">
                <nav aria-label="Paginación">
                    <ul class="pagination flex-wrap mb-0">

                        <!-- Primero / Anterior -->
                        <li class="page-item @(page <= 1 ? "disabled" : "")">
                            <a class="page-link"
                               href="@Url.Action("Contactos", new { page = 1, pageSize, q, todos })">««</a>
                        </li>
                        <li class="page-item @(page <= 1 ? "disabled" : "")">
                            <a class="page-link"
                               href="@Url.Action("Contactos", new { page = Math.Max(1, page - 1), pageSize, q, todos })">«</a>
                        </li>

                        <!-- Números (bordes + ventana alrededor de la actual) -->
                        @for (var i = 1; i <= totalPages; i++)
                        {
                            if (totalPages == 1 || i == 1 || i == totalPages || (i >= page - 2 && i <= page + 2))
                            {
                                <li class="page-item @(i == page ? "active" : "")">
                                    <a class="page-link"
                                       href="@Url.Action("Contactos", new { page = i, pageSize, q, todos })">@i</a>
                                </li>
                            }
                            else if (i == page - 3 || i == page + 3)
                            {
                                <li class="page-item disabled"><span class="page-link">…</span></li>
                            }
                        }

                        <!-- Siguiente / Último -->
                        <li class="page-item @(page >= totalPages ? "disabled" : "")">
                            <a class="page-link"
                               href="@Url.Action("Contactos", new { page = Math.Min(totalPages, page + 1), pageSize, q, todos })">»</a>
                        </li>
                        <li class="page-item @(page >= totalPages ? "disabled" : "")">
                            <a class="page-link"
                               href="@Url.Action("Contactos", new { page = totalPages, pageSize, q, todos })">»»</a>
                        </li>

                    </ul>
                </nav>
            </div>

        </div>
    </form>
</div>

<!-- Modal eliminar contacto -->
<div class="modal fade" id="contactoDeleteModal" tabindex="-1" aria-labelledby="contactoDeleteLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm mt-3">
        <div class="modal-content">
            <div class="modal-header py-2 px-3">
                <h6 class="modal-title mb-0" id="contactoDeleteLabel">Confirmar eliminación</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>

            <div class="modal-body py-2 px-3">
                ¿Eliminar <span id="contactoDeleteNombre" class="fw-semibold"></span>?
            </div>

            <div class="modal-footer py-2 px-3">
                <form asp-controller="Empresa" asp-action="EliminarContacto" method="post" class="m-0">
                    @Html.AntiForgeryToken()

                    <input type="hidden" name="id" id="deleteContactoId" />

                    <!-- Preservar filtros/página -->
                    <input type="hidden" name="page" value="@(ViewContext?.HttpContext?.Request?.Query["page"])" />
                    <input type="hidden" name="pageSize" value="@(ViewContext?.HttpContext?.Request?.Query["pageSize"])" />
                    <input type="hidden" name="q" value="@(ViewContext?.HttpContext?.Request?.Query["q"])" />
                    <input type="hidden" name="todos" value="@(ViewContext?.HttpContext?.Request?.Query["todos"])" />
                    <input type="hidden" name="estatus" value="@(ViewContext?.HttpContext?.Request?.Query["estatus"])" />

                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-sm text-white" style="background-color:#FF5100;border-color:#FF5100;">
                        Eliminar
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
      const modalEl = document.getElementById('contactoDeleteModal');
      if (!modalEl) return;

      modalEl.addEventListener('show.bs.modal', function (ev) {
        const btn = ev.relatedTarget;
        if (!btn) return;
        const id     = btn.getAttribute('data-id') || '';
        const nombre = btn.getAttribute('data-nombre') || '';

        const idInput   = modalEl.querySelector('#deleteContactoId');
        const nombreEl  = modalEl.querySelector('#contactoDeleteNombre');

        if (idInput)  idInput.value = id;
        if (nombreEl) nombreEl.textContent = nombre;
      });
    });
</script>



<!-- Modal de alerta (compacto y arriba) -->
<div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
    <div class="modal-dialog mt-3">
        <div class="modal-content">
            <div class="modal-header py-2 px-3">
                <h6 class="modal-title mb-0" id="alertModalLabel">Éxito</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body py-2 px-3" id="alertModalBody">Contacto registrado correctamente</div>
            <div class="modal-footer py-2 px-3">
                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@{
    var msg = TempData.Peek("Alert") as string;            // mirar sin consumir
    var title = TempData.Peek("AlertTitle") as string ?? "Aviso";
}

@if (!string.IsNullOrEmpty(msg))
{
    // Borrar ya mismo para que no aparezca en otras vistas
    TempData.Remove("Alert");
    TempData.Remove("AlertTitle");

    <script>
        document.addEventListener('DOMContentLoaded', function () {
          const bodyEl  = document.getElementById('alertModalBody');
          const titleEl = document.getElementById('alertModalLabel');
          if (bodyEl)  bodyEl.textContent  = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(msg));
          if (titleEl) titleEl.textContent = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(title));
          new bootstrap.Modal(document.getElementById('alertModal')).show();
        });
    </script>
}


<script>
    document.addEventListener('DOMContentLoaded', () => {
      const btnReset = document.getElementById('btnResetFiltros');
      if (!btnReset) return;

      btnReset.addEventListener('click', () => {
        const form = btnReset.closest('form');
        if (!form) return;

        const q       = form.querySelector('#qInput');
        const estatus = form.querySelector('#estatus');
        const pageHid = form.querySelector('input[name="page"]');

        if (q) q.value = '';
        if (estatus) estatus.value = '';     // deja "---Todos---"
        if (pageHid) pageHid.value = 1;      // vuelve a página 1

        form.submit();
      });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
      const est = document.getElementById('estatusInput');
      if (est) {
        est.addEventListener('change', () => est.form?.submit());
      }
      const reset = document.getElementById('btnResetFiltros');
      if (reset) {
        reset.addEventListener('click', () => {
          est.value = '';
        });
      }
    });
</script>


<script>
    document.addEventListener('DOMContentLoaded', function () {
      const selPageSize = document.getElementById('pageSize');
      if (selPageSize) {
        selPageSize.addEventListener('change', function () {
          const form = selPageSize.form;
          if (!form) return;
          let pageHidden = form.querySelector('#pageHidden');
          if (!pageHidden) {
            pageHidden = document.createElement('input');
            pageHidden.type = 'hidden'; pageHidden.name = 'page'; pageHidden.id = 'pageHidden';
            form.appendChild(pageHidden);
          }
          pageHidden.value = 1; // reset al cambiar pageSize
          form.submit();
        });
      }

      // Auto-submit al cambiar Estatus (opcional)
      const selEstatus = document.getElementById('estatus');
      if (selEstatus) {
        selEstatus.addEventListener('change', function () {
          const form = selEstatus.form;
          if (!form) return;
          let pageHidden = form.querySelector('#pageHidden');
          if (!pageHidden) {
            pageHidden = document.createElement('input');
            pageHidden.type = 'hidden'; pageHidden.name = 'page'; pageHidden.id = 'pageHidden';
            form.appendChild(pageHidden);
          }
          pageHidden.value = 1;
          form.submit();
        });
      }
    });
</script>

<style>

    .select-light {
        background-color: #eeeeee;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', async () => {
      const selPais   = document.getElementById('Pais');
      const selEstado = document.getElementById('Estado');
      const selCiudad = document.getElementById('Ciudad');

      // Valores iniciales para modo edición (o "" si insert)
    const paisInicial   = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model?.FormData?.Pais ?? ""));
    const estadoInicial = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model?.FormData?.Estado ?? ""));
    const ciudadInicial = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model?.FormData?.Ciudad ?? ""));


      const setOptions = (select, items, placeholder = "Seleccione un elemento") => {
        select.innerHTML = "";
        const opt0 = new Option(placeholder, "");
        select.appendChild(opt0);
        for (const it of items) {
          select.appendChild(new Option(it.texto, it.id));
        }
      };

      const disableAll = () => {
        selEstado.disabled = true;
        selCiudad.disabled = true;
      };

      const loadPaises = async () => {
        try {
          const r = await fetch('@Url.Action("ObtenerPaises", "Empresa")');
          const data = await r.json(); // [{id,texto}]
          setOptions(selPais, data);
          if (paisInicial) {
            selPais.value = paisInicial;
            selPais.dispatchEvent(new Event('change')); // dispara carga de estados
          }
        } catch (e) {
          console.error('Paises error', e);
        }
      };

      const loadEstados = async (pais) => {
        try {
          selEstado.disabled = true;
          selCiudad.disabled = true;
          setOptions(selEstado, [], "Cargando...");
          setOptions(selCiudad, [], "Seleccione un elemento");

          const url = '@Url.Action("ObtenerEstados", "Empresa")' + '?pais=' + encodeURIComponent(pais || '');
          const r = await fetch(url);
          const data = await r.json(); // [{id,texto}] o []

          if (data.length === 0) {
            // No hay estados para ese país → habilita ciudad directa (algunas APIs no soportan ciudades sin estado)
            setOptions(selEstado, [], "Sin estados");
            selEstado.disabled = true;
            selCiudad.disabled = true; // la API de ciudades requiere estado; si quieres, aquí podrías poner otra fuente
          } else {
            setOptions(selEstado, data);
            selEstado.disabled = false;
            if (estadoInicial) {
              selEstado.value = estadoInicial;
              selEstado.dispatchEvent(new Event('change'));
            }
          }
        } catch (e) {
          console.error('Estados error', e);
          setOptions(selEstado, [], "Error al cargar");
        }
      };

      const loadCiudades = async (pais, estado) => {
        try {
          selCiudad.disabled = true;
          setOptions(selCiudad, [], "Cargando...");

          const url = '@Url.Action("ObtenerCiudades", "Empresa")'
                    + '?pais=' + encodeURIComponent(pais || '')
                    + '&estado=' + encodeURIComponent(estado || '');
          const r = await fetch(url);
          const data = await r.json(); // [{id,texto}] o []

          if (data.length === 0) {
            setOptions(selCiudad, [], "Sin ciudades");
            selCiudad.disabled = true;
          } else {
            setOptions(selCiudad, data);
            selCiudad.disabled = false;
            if (ciudadInicial) selCiudad.value = ciudadInicial;
          }
        } catch (e) {
          console.error('Ciudades error', e);
          setOptions(selCiudad, [], "Error al cargar");
        }
      };

      // Eventos
      selPais.addEventListener('change', () => {
        const pais = selPais.value;
        if (!pais) { disableAll(); setOptions(selEstado, [], "Seleccione un elemento"); setOptions(selCiudad, [], "Seleccione un elemento"); return; }
        estadoInicial && (selEstado.value = ""); ciudadInicial && (selCiudad.value = "");
        loadEstados(pais);
      });

      selEstado.addEventListener('change', () => {
        const pais = selPais.value;
        const estado = selEstado.value;
        if (!estado) { setOptions(selCiudad, [], "Seleccione un elemento"); selCiudad.disabled = true; return; }
        loadCiudades(pais, estado);
      });

      // Inicio
      disableAll();
      await loadPaises();
    });
</script>
