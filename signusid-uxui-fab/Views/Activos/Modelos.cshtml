@{
    ViewData["Title"] = "Estados";
}

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/datatables-bs5/datatables.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/&#64;form-validation/form-validation.css" />
}

@section VendorScripts {
    <script src="~/vendor/libs/datatables-bs5/datatables-bootstrap5.js"></script>

    <script src="~/vendor/libs/&#64;form-validation/popular.js"></script>
    <script src="~/vendor/libs/&#64;form-validation/bootstrap5.js"></script>
    <script src="~/vendor/libs/&#64;form-validation/auto-focus.js"></script>

}

@section PageScripts {
    <script src="~/js/modelos-features.js"></script>

    <!-- Incluir jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

}

@* ************** Content ************** *@


@model AspnetCoreMvcFull.Models.Activos.ModelosViewModel

<div class="card p-3">
    <h4 class="mb-1">Modelos de Activos</h4>
    <br />



    <div class="row mb-3">
        <!-- Formulario de búsqueda -->
        <div class="col-md-6">
            <form method="get" action="@Url.Action("Modelos", "Activos")" class="mb-3">
                <div class="input-group">
                    <input type="text" name="search" id="searchInput2" class="form-control" placeholder="Buscar por nombre o descripción" value="@ViewBag.SearchQuery" />
                    <button type="button" class="btn" id="clearSearch2" style="background-color: white; border: 1px solid #ced4da; color: #495057;">
                        X
                    </button>

                    <button type="submit" class="btn btn-primary">Buscar</button>

                </div>
            </form>
        </div>

        <!-- Formulario de filtro -->
        <div class="col-md-6">
            <form method="get" action="@Url.Action("Modelos")" class="d-flex align-items-center">
                <div class="form-group w-100 me-3">
                    <select id="filterAssets" name="hasAssets" class="form-control">
                        <option value="">-- Todos --</option>
                        <option value="withAssets">Con activos asignados</option>
                        <option value="withoutAssets">Sin activos asignados</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Filtrar</button>
            </form>
        </div>
    </div>


    <!-- Botón + Nuevo Estado -->
    <button type="button" id="newModelButton" data-bs-target="#addModelModal" data-bs-toggle="modal" data-context="new"
            class="btn btn-primary align-self-end"
            style="white-space: nowrap;">
        + Nuevo Modelo
    </button>

    <div class="card-datatable table-responsive">
        <form id="deleteBatchForm" method="post" action="@Url.Action("EliminarRegistroBatch", "Activos")">
            <!-- Campo oculto donde almacenamos los IDs seleccionados -->
            <input type="hidden" id="modeloIDs" name="modeloIDs" />

            <button id="deleteBatchBtn" class="btn btn-sm btn-danger" title="Borrar en batch" disabled>
                <i class="fas fa-trash"></i>
            </button>
        </form>

        <table class="datatables-basic table">
            <thead>
                <tr>
                    <th>
                        <input type="checkbox" id="select_all" />
                    </th>
                    <th class="d-none">ID</th>
                    <th>
                        <a style="color: black; text-decoration: none;" href="@Url.Action("Modelos", new { sortColumn = "marca", sortDirection = ViewBag.SortColumn == "marca" && ViewBag.SortDirection == "asc" ? "desc" : "asc", page = Model.CurrentPage, search = ViewBag.SearchQuery })">
                            Marca @if (ViewBag.SortColumn == "marca")
                            {
                                <i class="fas fa-sort-@ViewBag.SortDirection"></i>
                            }
                        </a>
                    </th>

                    <th>
                        <a style="color: black; text-decoration: none;" href="@Url.Action("Modelos", new { sortColumn = "name", sortDirection = ViewBag.SortColumn == "name" && ViewBag.SortDirection == "asc" ? "desc" : "asc", page = Model.CurrentPage, search = ViewBag.SearchQuery })">
                            Nombre @if (ViewBag.SortColumn == "name")
                            {
                                <i class="fas fa-sort-@ViewBag.SortDirection"></i>
                            }
                        </a>
                    </th>
                    <th>
                        <a style="color: black; text-decoration: none;" href="@Url.Action("Modelos", new { sortColumn = "description", sortDirection = ViewBag.SortColumn == "description" && ViewBag.SortDirection == "asc" ? "desc" : "asc", page = Model.CurrentPage, search = ViewBag.SearchQuery })">
                            Descripción @if (ViewBag.SortColumn == "description")
                            {
                                <i class="fas fa-sort-@ViewBag.SortDirection"></i>
                            }
                        </a>
                    </th>
                    <th>
                        <a style="color: black; text-decoration: none;" href="@Url.Action("Modelos", new { sortColumn = "assignatedAssets", sortDirection = ViewBag.SortColumn == "assignatedAssets" && ViewBag.SortDirection == "asc" ? "desc" : "asc", page = Model.CurrentPage, search = ViewBag.SearchQuery })">
                            Activos @if (ViewBag.SortColumn == "assignatedAssets")
                            {
                                <i class="fas fa-sort-@ViewBag.SortDirection"></i>
                            }
                        </a>
                    </th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var estado in Model.Modelos)
                {
                    <tr>
                        <td>
                            <input type="checkbox" class="checkbox-item" data-model-id="@estado.modeloID" />
                        </td>
                        <td class="d-none">@estado.modeloID</td>
                        <td>@estado.marca</td>
                        <td>@estado.name</td>
                        <td>@estado.description</td>
                        <td>@estado.assignatedAssets</td>
                        <td>
                            <a data-bs-target="#addModelModal"
                               data-bs-toggle="modal"
                               onclick="setupEditContext(this, '@(estado.marca)', '@(estado.name)', '@(estado.description)')"
                               class="btn btn-sm btn-primary btn-edit"
                               title="Editar"
                               data-name="@estado.name">
                                <i class="fas fa-edit text-white"></i>
                            </a>
                            <button class="btn btn-sm btn-danger" title="Borrar"
                                    data-bs-toggle="modal" data-bs-target="#deleteModal"
                                    data-id="@estado.modeloID"
                                    data-name="@estado.name" data-assets="@estado.assignatedAssets">
                                <i class="fas fa-trash"></i>
                            </button>

                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>

    <!-- Paginación -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-end">
            @if (Model.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Modelos", new { page = Model.CurrentPage - 1, hasAssets = ViewContext.HttpContext.Request.Query["hasAssets"], search = ViewContext.HttpContext.Request.Query["search"] })" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
            }

            @for (var i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Modelos", new { page = i, hasAssets = ViewContext.HttpContext.Request.Query["hasAssets"], search = ViewContext.HttpContext.Request.Query["search"] })">@i</a>
                </li>
            }

            @if (Model.CurrentPage < Model.TotalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Modelos", new { page = Model.CurrentPage + 1, hasAssets = ViewContext.HttpContext.Request.Query["hasAssets"], search = ViewContext.HttpContext.Request.Query["search"] })" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            }
        </ul>
    </nav>

</div>


<!-- Modal de confirmación -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirmar eliminación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="deleteModalBody">
                <!-- Este texto se actualizará dinámicamente -->
            </div>
            <div class="modal-footer">
                <!-- Botón para cerrar el modal -->
         

                <!-- Formulario para enviar la solicitud de eliminación -->
                <form id="deleteForm" method="get" action="@Url.Action("EliminarRegistro", "Activos")" class="mb-3">
                    <!-- Enviar modeloID desde aquí como parámetro -->
                    <input type="hidden" id="modeloID" name="modeloID" />
                    <button type="submit" class="btn btn-danger">Borrar</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Modal de advertencia para no editable -->
<div class="modal fade" id="nonEditableModal" tabindex="-1" aria-labelledby="nonEditableModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="nonEditableModalLabel">Edición no permitida</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="nonEditableModalBody">
                <!-- Este texto se actualizará dinámicamente con el nombre del estado -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<script>
    const fill_selected_model_data = (marca, name, description) => {
        // Referencias a los elementos
        const selectMarca = document.getElementById("marca");
        const inputName = document.getElementById("name");
        const inputDescription = document.getElementById("description");

        // Verificar si la marca ya existe en las opciones del select
        let optionExists = Array.from(selectMarca.options).some(option => option.value === marca);

        // Si no existe, agregarla como una nueva opción
        if (!optionExists) {
            const newOption = document.createElement("option");
            newOption.value = marca;
            newOption.textContent = marca;
            selectMarca.appendChild(newOption);
        }

        // Establecer el valor del select y los inputs
        selectMarca.value = marca;
        inputName.value = name;
        inputDescription.value = description;
    };

    function setupEditContext(element, marca, name, description) {
        const form = document.getElementById("addModelsForm");
        const modalTitle = document.getElementById("modalTitle");
        const saveButton = document.getElementById("saveStateButton");

        // Cambiar el contexto a "edit"
        form.setAttribute("data-context", "edit");

        // Llenar los datos seleccionados
        fill_selected_model_data(marca, name, description);

        // Modificar el modal en función del contexto
        if (form.getAttribute("data-context") === "edit") {
            modalTitle.textContent = "Editar Modelo"; // Cambiar el título
            saveButton.textContent = "Editar"; // Cambiar el texto del botón
            form.setAttribute("action", "/Activos/EditarModelo"); // Cambiar la acción del formulario
        } else {
            modalTitle.textContent = "Agregar Modelo Nuevo"; // Restablecer el título
            saveButton.textContent = "Guardar"; // Restablecer el texto del botón
            form.setAttribute("action", "/Activos/AgregarModelo"); // Restablecer la acción
        }
    }

    document.getElementById("newModelButton").addEventListener("click", function () {
        const form = document.getElementById("addModelsForm");
        const modalTitle = document.getElementById("modalTitle");
        const saveButton = document.getElementById("saveStateButton");

        // Configurar el modal para agregar un nuevo modelo
        form.setAttribute("data-context", "new");
        modalTitle.textContent = "Agregar Modelo Nuevo"; // Restablecer el título
        saveButton.textContent = "Guardar"; // Restablecer el texto del botón
        form.setAttribute("action", "/Activos/AgregarModelo"); // Restablecer la acción del formulario

        // Limpia los campos del formulario (opcional)
        form.reset();
    });






</script>

@await Html.PartialAsync("../_Partials/_Modals/ModalAddModel")
