<!-- Add Edificios Modal:
En este form se el ingreso y edición de edificios.
-->
<div class="modal fade" id="editStateModal" data-context="new" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-simple modal-dialog-centered modal-add-new-role">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                <div class="text-center mb-6">
                    <h4 class="role-title mb-2">Editar Estado</h4>
                </div>
                <!-- Add esdificios form -->

                <form id="editStatusForm" class="row g-6" asp-action="EditarEstado" asp-controller="Administration" method="post">
                    <input type="hidden" id="edificioIdEd" name="assetStatusSysId">
                    <div class="col-12">
                        <label class="form-label" for="name">Nombre del Estado</label>
                        <input type="text"
                               id="nameEd"
                               name="name"
                               class="form-control input2"
                               placeholder="Ingrese el nombre del edificio"
                               required /><!-- ctl00$MainContent$txtAddAssetStatus"-->
                        <div id="stateNameErrorEd" class="error-message2"></div>
                    </div>
                    <div class="col-12">
                        <label class="form-label" for="description">Descripción</label>
                        <textarea id="descriptionEd"
                                  name="description"
                                  class="form-control input2"
                                  placeholder="Ingrese una breve descripción del estado"
                                  rows="4"
                                  required></textarea><!-- name="ctl00$MainContent$txtAddDescription"-->
                        <div id="stateDescriptionErrorEd" class="error-message2"></div>
                    </div>

                    <div id="addingNamesError" class="error-message3"></div>

                    <div class="col-12 d-flex justify-content-center gap-3 mt-3">
                        <button type="submit" name="ctl00$MainContent$btnEditstate" class="btn btn-primary button2" id="editStateButton">
                            Editar
                        </button> <!--ctl00$MainContent$btnAdd-->
                        <button type="button" class="btn btn-secondary button2" id="cancelButtonEdit" data-bs-dismiss="modal">
                            Cancelar
                        </button>
                    </div>
                </form>
                <!--/ Add role form -->
            </div>
        </div>
    </div>
</div>
<!-- #region Estilos CSS -->

<style>
    .error-message2 {
        color: red;
        font-size: 0.875rem;
        margin-top: 5px;
    }

    .error-message3 {
        color: red;
        font-size: 0.875rem;
        text-align: center;
        margin-top: 5px;
    }



    .input2 {
        margin-bottom: 10px;
    }

    .button2 {
        margin-top: 10px;
    }
</style>

<!-- #endregion -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("editStatusForm");
        const cancelButton = document.getElementById("cancelButton");
        const modal = document.getElementById("editStateModal");

        function resetForm() {
            form.reset();
            document.getElementById("stateNameErrorEd").textContent = "";
            document.getElementById("stateDescriptionErrorEd").textContent = "";
            document.getElementById("addingNamesError").textContent = "";
        }

        // Cerrar el modal y reiniciar el formulario al hacer clic en el botón Cancelar
        cancelButton.addEventListener("click", resetForm);

        // Cerrar el modal y reiniciar el formulario cuando el modal se oculta
        modal.addEventListener("hidden.bs.modal", resetForm);

        form.addEventListener("submit", function (e) {
            e.preventDefault();

            const nameInput = document.getElementById("nameEd");
            const descriptionInput = document.getElementById("descriptionEd");

            const nameValue = nameInput.value.trim();
            const descriptionValue = descriptionInput.value.trim();

            const nameErrorDiv = document.getElementById("stateNameErrorEd");
            const descriptionErrorDiv = document.getElementById("stateDescriptionErrorEd");

            nameErrorDiv.textContent = "";
            descriptionErrorDiv.textContent = "";

            let isValid = true;

            if (!nameValue || nameValue.length < 3 || nameValue.length > 50) {
                nameErrorDiv.textContent = "El nombre debe tener entre 3 y 50 caracteres.";
                isValid = false;
            }

            if (!descriptionValue || descriptionValue.length < 3 || descriptionValue.length > 150) {
                descriptionErrorDiv.textContent = "La descripción debe tener entre 3 y 150 caracteres.";
                isValid = false;
            }

            if (isValid) {
                form.submit();
            }
        });
    });

    document.addEventListener("DOMContentLoaded", function () {
        const editButtons = document.querySelectorAll(".btn-edit");
        const modal = new bootstrap.Modal(document.getElementById("editStateModal"));

        editButtons.forEach(button => {
            button.addEventListener("click", function () {
                const edificioId = this.getAttribute("data-id");
                const name = this.getAttribute("data-name");
                const description = this.getAttribute("data-description");

                // Llenar los campos del modal con los datos del edificio
                document.getElementById("edificioIdEd").value = edificioId;
                document.getElementById("nameEd").value = name;
                document.getElementById("descriptionEd").value = description;

                // Mostrar el modal
                modal.show();
            });
        });

        // Resetear formulario cuando se cierra el modal
        document.getElementById("editStateModal").addEventListener("hidden.bs.modal", function () {
            document.getElementById("editStatusForm").reset();
        });
    });
</script>



<!--/ Add Edificios Modal -->


@* <!-- Add Role Modal:
En este form se el ingreso y edición de estados de activos.
-->

<div class="modal fade" id="addStateModal" data-context="new" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-simple modal-dialog-centered modal-add-new-role">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                <div class="text-center mb-6">
                    <h4 class="role-title mb-2">Agregar Estado Nuevo</h4>
                </div>
                <!-- Add state form -->

                <form id="addStatusForm" class="row g-6" asp-action="EditarEstado" asp-controller="Administration" method="post">

                    <div class="col-12">
                        <input type="hidden" name="assetStatusSysId" id="assetStatusSysId" value="" />
                        <label class="form-label" for="name">Nombre Estado</label>
                        <input type="text"
                               id="name"
                               name="name"
                               class="form-control input2"
                               placeholder="Ingrese el nombre del estado"
                               required /><!-- ctl00$MainContent$txtAddAssetStatus"-->
                        <div id="stateNameError" class="error-message2"></div>
                    </div>
                    <div class="col-12">
                        <label class="form-label" for="description">Descripción</label>
                        <textarea id="description"
                                  name="description"
                                  class="form-control input2"
                                  placeholder="Ingrese una breve descripción del estado"
                                  rows="4"
                                  required></textarea><!-- name="ctl00$MainContent$txtAddDescription"-->
                        <div id="stateDescriptionError" class="error-message2"></div>
                    </div>

                    <div id="addingNamesError" class="error-message3"></div>

                    <div class="col-12 d-flex justify-content-center gap-3 mt-3">
                        <button type="submit" name="ctl00$MainContent$btnAddstate" class="btn btn-primary button2" id="saveStateButton">
                            Guardar
                        </button> <!--ctl00$MainContent$btnAdd-->
                        <button type="button" class="btn btn-secondary button2" id="cancelButton" data-bs-dismiss="modal">
                            Cancelar
                        </button>
                    </div>
                </form>
                <!--/ Add role form -->
            </div>
        </div>
    </div>
</div>
<!-- #region Estilos CSS -->

<style>
    .error-message2 {
        color: red;
        font-size: 0.875rem;
        margin-top: 5px;
    }

    .error-message3 {
        color: red;
        font-size: 0.875rem;
        text-align: center;
        margin-top: 5px;
    }



    .input2 {
        margin-bottom: 10px;
    }

    .button2 {
        margin-top: 10px;
    }
</style>

<!-- #endregion -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const form3 = document.getElementById("addStatusForm");
        const editModal = document.getElementById("addStateModal"); // Modal
        const title = editModal.querySelector(".role-title"); // Título del modal
        const saveButton = document.getElementById("saveStateButton"); // Botón guardar

        // Lista de nombres restringidos
        const statusNames = ["Nuevo", "En uso", "Sin uso", "Dañado", "Destruido", "Donado"];

        // Inicializar evento en el botón "Nuevo Estado"
        const addStateButton = document.getElementById("buttonAddStates");
        addStateButton.addEventListener("click", function () {
            // Configurar el modal para agregar un nuevo estado
            title.textContent = "Agregar Estados Nuevos"; // Título para agregar
            saveButton.textContent = "Guardar"; // Texto del botón a "Guardar"
            form3.setAttribute("data-context", "new"); // Establecer contexto a "new"

            // Limpiar los campos del formulario (ya que es un nuevo estado)
            document.getElementById("name").value = "";
            document.getElementById("description").value = "";

            // Abrir el modal
            const modalInstance = new bootstrap.Modal(editModal);
            modalInstance.show();
        });

        // Inicializar evento en los botones de edición
        document.querySelectorAll(".btn-edit").forEach(button => {
            button.addEventListener("click", function () {
                const context = this.getAttribute("data-context"); // Contexto (edit o new)
                const name = this.getAttribute("data-name") || ""; // Nombre (opcional)
                const description = this.getAttribute("data-description") || ""; // Descripción (opcional)

                // Configurar el modal según el contexto de edición
                if (context === "edit") {
                    title.textContent = "Editar Estados"; // Título para editar
                    saveButton.textContent = "Editar"; // Cambiar texto del botón a "Editar"
                    form3.setAttribute("data-context", "edit"); // Actualizar el contexto del formulario
                }

                // Llenar los campos del formulario con los valores existentes
                document.getElementById("name").value = name;
                document.getElementById("description").value = description;

                // Abrir el modal
                const modalInstance = new bootstrap.Modal(editModal);
                modalInstance.show();
            });
        });

        // Cerrar el modal y reiniciar el formulario
        const cancelButton = document.getElementById("cancelButton");
        cancelButton.addEventListener("click", function () {
            // Reiniciar el formulario cuando se cierre el modal
            form3.reset();
        });

        // Limpiar el formulario cuando se cierre fuera del modal
        editModal.addEventListener("hidden.bs.modal", function () {
            form3.reset(); // Resetear el formulario al cerrarse el modal
        });


        //// Validar y enviar el formulario
            //// Validar y enviar el formulario
    form3.addEventListener("submit", function (e) {
        e.preventDefault();

        const nameInput = document.getElementById("name");
        const descriptionInput = document.getElementById("description");
        const nameValue = nameInput.value.trim();
        const descriptionValue = descriptionInput.value.trim();

        // Divs de error
        const nameErrorDiv = document.getElementById("stateNameError");
        const descriptionErrorDiv = document.getElementById("stateDescriptionError");
        const addingNamesErrorDiv = document.getElementById("addingNamesError");

        // Limpiar mensajes de error previos
        nameErrorDiv.textContent = "";
        descriptionErrorDiv.textContent = "";
        addingNamesErrorDiv.textContent = "";

        let isValid = true;

        // Validar nombre
        if (!nameValue || nameValue.length < 3 || nameValue.length > 50) {
            nameErrorDiv.textContent = "El nombre debe tener entre 3 y 50 caracteres.";
            isValid = false;
        }

        // Validar si el nombre está en la lista restringida
        if (statusNames.includes(nameValue)) {
            addingNamesErrorDiv.textContent = `El nombre "${nameValue}" está restringido y no puede ser usado.`;
            isValid = false;
        }

        // Validar descripción
        if (!descriptionValue || descriptionValue.length < 3 || descriptionValue.length > 150) {
            descriptionErrorDiv.textContent = "La descripción debe tener entre 3 y 150 caracteres.";
            isValid = false;
        }

        if (isValid) {
            console.log("Formulario válido. Enviando...");
            form3.submit(); // Se enviará al endpoint que ya está en el HTML
        } else {
            console.log("Formulario inválido. Corrige los errores e inténtalo nuevamente.");
        }
    });

    });





    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("addStatusForm");
        const cancelButton = document.getElementById("cancelButton");
        const addStateModal = document.getElementById("addStateModal"); // Modal
        const modalInstance = new bootstrap.Modal(addStateModal);

        // Al hacer clic en el botón Cancelar
        cancelButton.addEventListener("click", function () {
            // Limpiar los campos del formulario
            form.reset();

            // Limpiar los mensajes de error
            document.getElementById("stateNameError").textContent = '';
            document.getElementById("stateDescriptionError").textContent = '';
            document.getElementById("addingNamesError").textContent = '';

            // Cerrar el modal de forma programática para asegurar el cierre adecuado
            modalInstance.hide();
        });

        // Este evento se dispara cuando el modal se cierra
        addStateModal.addEventListener('hidden.bs.modal', function () {
            // Limpiar cualquier dato del formulario después de cerrarlo
            form.reset();
            document.getElementById("stateNameError").textContent = '';
            document.getElementById("stateDescriptionError").textContent = '';
            document.getElementById("addingNamesError").textContent = '';

            // Asegurarse de que no haya backdrop activo después de cerrar
            const backdrop = document.querySelector('.modal-backdrop');
            if (backdrop) {
                backdrop.remove(); // Elimina el fondo gris (backdrop)
            }

            // Restablecer el scroll de la página y eliminar la clase modal-open
            document.body.style.overflow = ''; // Permitir el scroll
            document.body.classList.remove('modal-open'); // Eliminar la clase modal-open
        });


    });

       // Lista de nombres de estado válidos
    const statusNames = ["Nuevo", "En uso", "Sin uso", "Dañado", "Destruido", "Donado"];

    // Función que verifica las condiciones y deshabilita los inputs si se cumplen
    function handleModalOpen() {
      // Seleccionar elementos necesarios del DOM
      const roleTitle = document.querySelector('#addStateModal .role-title');
      const inputName = document.getElementById('name');
      const inputDescription = document.getElementById('description');
      const errorDiv = document.getElementById('addingNamesError'); // Div para mostrar el mensaje

      // Limpiar mensaje de error al abrir el modal
      errorDiv.textContent = "";

      // Verificar si el título del modal es "Editar Estado"
      if (roleTitle?.textContent.trim() === "Editar Estado") {
        const nameValue = inputName?.value.trim();
        const descriptionValue = inputDescription?.value.trim();

        // Verificar si el input "name" coincide con algún valor de `statusNames`
        if (statusNames.includes(nameValue)) {
          // Deshabilitar los inputs si se cumplen las condiciones
          inputName.disabled = true;
          inputDescription.disabled = true;

          // Mostrar mensaje de error
          errorDiv.textContent = "Este modelo no debe ser editado";
        } else {
          // Asegurarse de que los inputs estén habilitados si no se cumplen las condiciones
          inputName.disabled = false;
          inputDescription.disabled = false;
        }
      } else {
        // Habilitar inputs si no es "Editar Estado"
        inputName.disabled = false;
        inputDescription.disabled = false;

        // Limpiar mensaje de error
        errorDiv.textContent = "";
      }
    }

    // Escuchar el evento de apertura del modal
    document.getElementById('addStateModal').addEventListener('shown.bs.modal', handleModalOpen);

</script>
 *@
