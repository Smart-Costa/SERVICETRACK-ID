@{
  ViewData["Title"] = "Permisos";
}

@section VendorStyles {
  <link rel="stylesheet" href="~/vendor/libs/datatables-bs5/datatables.bootstrap5.css">
  <link rel="stylesheet" href="~/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.css">
  <link rel="stylesheet" href="~/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.css">
  <link rel="stylesheet" href="~/vendor/libs/&#64;form-validation/form-validation.css" />
}

@section VendorScripts {
  <script src="~/vendor/libs/datatables-bs5/datatables-bootstrap5.js"></script>

  <script src="~/vendor/libs/&#64;form-validation/popular.js"></script>
  <script src="~/vendor/libs/&#64;form-validation/bootstrap5.js"></script>
  <script src="~/vendor/libs/&#64;form-validation/auto-focus.js"></script>
}

@section PageScripts {
  <script src="~/js/app-access-permission.js"></script>
  <script src="~/js/modal-add-permission.js"></script>
  <script src="~/js/modal-edit-permission.js"></script>
}

@* ************** Content ************** *@

@model AspnetCoreMvcFull.Controllers.AccessController.PermissionEntity[]


@* VARIABLES QUE CONTIENEN LA INFORMACION DE FILTROS DE BUSQUEDA, ORDEN DE REGISTROS Y PAGINADO DE DATOS *@
@{

  //Variable que almacena el string de busqueda por nombre, apellido y correo de empleados
  string permission_search_input = ViewData["Permission_Search_Input"] is string permission_search_input_value ?
  permission_search_input_value : "";
  //Variable que contiene el nombre de la columna que dicta el orden
  string order_by = ViewData["Order_By"] is string order_by_value ? order_by_value : "name";
  //Variable que almacena el conteo de paginas totales
  int total_pages = Int32.TryParse(ViewData["Total_Pages"]?.ToString(), out int total_pages_result) ?
  total_pages_result : 1;
  //Variable que contiene el numero de pagina actual
  int current_page = Int32.TryParse(ViewData["Current_Page"]?.ToString(), out int current_page_result) ?
  current_page_result : 1;
  //Variable que contiene el numero de empleados por pagina
  int permissions_per_page = Int32.TryParse(ViewData["Permissions_Per_Page"]?.ToString(), out int
  permissions_per_page_result) ?
  permissions_per_page_result : 5;


}

<style>
  /* Clase para el efecto de hover de seleccion */
  .sortable-column:hover {
    background-color: #f0f0f0;
    /* Fondo gris claro */
    cursor: pointer;
    /* Cambia el cursor a mano */
  }

  /* Clase para el encabezado seleccionado */
  .sortable-column.active {
    background-color: #f0f0f0;
    /* Fondo gris para indicar selección */
    font-weight: bold;
    /* Resalta el texto */
  }
</style>

<!-- Permission Table -->

<div class="card">

  <link rel="stylesheet" href="@Url.Content("~/css/site.css")" />


  @* Form para enviar la solicitud de busqueda al Controller segun los filtros ingresados*@
  <form asp-action="Permission" asp-controller="Access" method="get" class="dt_adv_search" id="search_form">

    <div class="card-body">

      @* FILTROS DE BUSQUEDA Y BOTONES *@
      <div class="row">
        <div class="col-12">



          @* Filtros de cantidad de Permisos, Input de busqueda y Boton Buscar *@
          <div class="row g-3 mt-1 ">

            @* Filtro de cantidad de Permisos a mostrar *@
            <div class="col d-flex align-items-center">

              <label for="permissions_per_page" class="me-2">Mostrar</label>
              <select id="permissions_per_page" name="permissions_per_page" class="form-select form-select-sm w-auto h-75">
                @* SE ITERA PARA CREAR LAS OPCIONES DE PAGINADO Y SE IDENTIFICA SI UNA OPCION YA ESTABA SELECCIONADA
                      ANTERIORMENTE PARA DEJAR ESA OPCION ACTIVA *@
                @{
                  for (int i = 5; i <= 20; i = i + 5)
                  {
                    if (i == permissions_per_page)
                    {
                      <option value="@i" selected>@i</option>
                    }
                    else
                    {
                      <option value="@i">@i</option>
                    }

                  }
                }
              </select>
              <span class="ms-2">permisos</span>
            </div>
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                  const permissionsPerPageSelect = document.getElementById('permissions_per_page')
                  const searchForm = document.getElementById('search_form');

                  if (permissionsPerPageSelect && searchForm) {
                    console.log('Select y formulario encontrados');

                    function submitForm() {
                      console.log('Opción seleccionada:', permissionsPerPageSelect.value);
                      setTimeout(() => {
                        if (typeof searchForm.requestSubmit === 'function') {
                          searchForm.requestSubmit();
                        } else {
                          searchForm.submit();
                        }
                      }, 100);
                    }

                    permissionsPerPageSelect.addEventListener('change', submitForm);
                    permissionsPerPageSelect.addEventListener('click', () => console.log('Select clickeado'));
                  } else {
                    console.log('No se encontraron elementos necesarios');
                  }
                });
            </script>
            @* Filtro de cantidad de Permisos a mostrar *@


            @* Input de busqueda y Boton buscar  *@
            <div class="col d-flex justify-content-end align-items-center">
              <input type="text" class="form-control dt-input dt-full-name w-full mx-2 h-auto" data-column=1
                data-column-index="0" placeholder="Permiso..." name="permission_search_input"
                value="@(permission_search_input)">


              <button class="btn btn-primary align-self-center mx-2 w-full h-auto" id="search_button">
                Buscar
              </button>

            </div>
            @* Botones buscar *@


          </div>
          @* Filtros de cantidad de Permisos y Boton Buscar *@


        </div>
      </div>



    </div>


    @* Tabla de los permisos *@
    <div class="card-datatable table-responsive">
      <table class="dt-advanced-search table">

        <script>
          //METODO QUE SEGUN EL CAMPO CAMBIA EL ORDEN DE LOS REGISTROS A ASCENDENTE O DESCENDENTE
          const change_orderby = (columnName) => {
            const current_orderby_value = document.getElementById('order_by').value;
            if (current_orderby_value === `${columnName}_ascending`) {
              document.getElementById('order_by').value = `${columnName}_descending`;
              console.log('change to descending');
            } else {
              document.getElementById('order_by').value = `${columnName}_ascending`;
              console.log('change to ascending');
            }
            document.getElementById('search_button').click();
          }

        </script>

        @* Titulos de las columnas de la tabla *@
        <thead>
          <tr>

            @* INPUT OCULTO QUE ALMACENA EL ORDEN DE LA LISTA PARA ENVIAR AL FORMULARIO *@
            <input type="hidden" id="order_by" name="order_by" value="@order_by" />

            <th>ID</th>
            @* Se consulta si el orden por nombre ya estaba asignado
                para asignar el estilo de columna representativa del orden

                 Si no existe ningun valor en order_by se asigna a nombre *@
            <th class=" sortable-column cursor-pointer sortable-column cursor-pointer
                @(order_by == "name_ascending" || order_by == "name_descending"
                ? "active"
                : ""
                )" onclick="change_orderby('name')">
              Nombre
              @{
                //Dependiendo del orden se carga el icono de la flecha hacia arriba o hacia abajo
                if (order_by == "name_ascending")
                {
                  <span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                      class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-down">
                      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                      <path d="M12 5l0 14" />
                      <path d="M18 13l-6 6" />
                      <path d="M6 13l6 6" />
                    </svg>
                  </span>
                }
                else if (order_by == "name_descending")
                {
                  <span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                      class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-up">
                      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                      <path d="M12 5l0 14" />
                      <path d="M18 11l-6 -6" />
                      <path d="M6 11l6 -6" />
                    </svg>
                  </span>
                }

              }

            </th>

            @* Se consulta si el orden por descriocion ya estaba asignado
                para asignar el estilo de columna representativa del orden *@
            <th class=" sortable-column cursor-pointer
            @(order_by == "description_ascending" || order_by == "description_descending"
            ? "active"
            : ""
            )" onclick="change_orderby('description')">
              Descripción
              @{
                //Dependiendo del orden se carga el icono de la flecha hacia arriba o hacia abajo
                if (order_by == "description_ascending")
                {
                  <span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                      class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-down">
                      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                      <path d="M12 5l0 14" />
                      <path d="M18 13l-6 6" />
                      <path d="M6 13l6 6" />
                    </svg>
                  </span>
                }
                else if (order_by == "description_descending")
                {
                  <span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                      class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-up">
                      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                      <path d="M12 5l0 14" />
                      <path d="M18 11l-6 -6" />
                      <path d="M6 11l6 -6" />
                    </svg>
                  </span>
                }

              }
            </th>


            <th>
              Roles
            </th>
            @* Se consulta si el orden por fecha de creacion ya estaba asignado
                para asignar el estilo de columna representativa del orden *@
            <th class=" sortable-column cursor-pointer
            @(order_by == "creation_date_ascending" || order_by == "creation_date_descending"
            ? "active"
            : ""
            )" onclick="change_orderby('creation_date')">
              Fecha de creación
              @{
                if (order_by == "creation_date_ascending")
                {
                //Dependiendo del orden se carga el icono de la flecha hacia arriba o hacia abajo
                  <span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                      class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-down">
                      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                      <path d="M12 5l0 14" />
                      <path d="M18 13l-6 6" />
                      <path d="M6 13l6 6" />
                    </svg>
                  </span>
                }
                else if (order_by == "creation_date_descending")
                {
                  <span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                      class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-up">
                      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                      <path d="M12 5l0 14" />
                      <path d="M18 11l-6 -6" />
                      <path d="M6 11l6 -6" />
                    </svg>
                  </span>
                }

              }
            </th>


          </tr>
        </thead>

        @* Listado de los Permisos del Model en la tabla *@
        <tbody class="table-border-bottom-0" style="table-layout: fixed;">

          @* Se hace loop en el Model que contiene la lista de permisos y se crean las entradas en la tabla *@
          @{

            foreach (var permission in Model)
            {
              <tr>
                <td>
                  @permission.Id
                </td>

                <td>
                  @permission.Name
                </td>

                <td>
                  @permission.Description
                </td>

                <td style="width: 35%;">
                  @{
                    for (int i = 0; i < permission.Roles.Length; i++)
                    {
                      switch (i)
                      {
                        case 0:
                          <label class="badge bg-label-primary me-1 mt-2">@permission.Roles[i]</label>
                          break;
                        case 1:
                          <label class="badge bg-label-success me-1 mt-2">@permission.Roles[i]</label>
                          break;
                        case 2:
                          <label class="badge bg-label-info me-1 mt-2">@permission.Roles[i]</label>
                          break;
                        case 3:
                          <label class="badge bg-label-warning me-1 mt-2">@permission.Roles[i]</label>
                          break;
                        default:
                          <label class="badge bg-label-warning me-1 mt-2">@permission.Roles[i]</label>
                          break;

                      }
                    }

                  }
                </td>

                <td style="width: 15%;">
                  @permission.CreationDate
                </td>


              </tr>

            }


          }




        </tbody>
      </table>

      @* Si no se encuentran Permisos en el Model (Array de Permisos), se muestra este mensaje*@
      @{

        if (Model.Length == 0)
        {
          <div class="d-flex justify-content-center">
            <label class="mt-10">No se encontraron permisos</label>
          </div>
        }

      }


      @* Paginacion *@
      <nav aria-label="Page navigation">
        <div class="d-flex flex-row-reverse m-lg-3">

          @* CAMPO OCULTO QUE ALMACENA EL NUMERO DE LA PAGINA SELECCIONADA PARA ENVIAR AL FORMULARIO *@
          <input type="hidden" id="page_number" name="page_number" value="@(current_page)" />





          @* LISTA CON LOS BOTONES DE PAGINACION *@

          <ul class="pagination pagination-rounded">
            @* BOTON DE VOLVER A LA PRIMERA PAGINA *@
            <li class="page-item first">
              @* Onclick asigna el valor correspondiente a current_page *@
              <button class="page-link" type="submit" onclick="document.getElementById('page_number').value = 1"><i
                  class="ti ti-chevrons-left ti-sm"></i></button>
            </li>
            @* BOTON DE VOLVER A LA PAGINA ANTERIOR *@
            <li class="page-item prev">
              @* Onclick asigna el valor correspondiente a current_page *@
              <button class="page-link" type="submit"
                onclick="document.getElementById('page_number').value = @(current_page > 1 ? current_page - 1 : 1)">
                <i class="ti ti-chevron-left ti-sm"></i>
              </button>
            </li>

            @* LOOP PARA CREAR LOS BOTONES DE PAGINACION
                SE CREA LA PAGINA ACTUAL Y LAS DOS SIGUIENTES*@
            @{

              for (int i = current_page; i <= current_page + 2; i++)
              {
                @* Solo si i es menor o igual a las paginas totales se crea el objeto <li>  *@
                if (i <= total_pages)
                {
                  @* Si la pagina actual coincide con i, significa que es la pagina actual correspondiente y se asigna la clase al <li> *@
                  <li class="page-item @(current_page == i ? "active": "")">
                    <button class="page-link" type="submit"
                      onclick="document.getElementById('page_number').value = @i">@i</button>
                  </li>
                }

              }
            }

            @* BOTON DE IR A LA PAGINA SIGUIENTE *@
            <li class="page-item next">
              @* Onclick asigna el valor correspondiente a current_page *@
              <button class="page-link" type="submit"
                onclick="document.getElementById('page_number').value = @(current_page < total_pages ? current_page + 1 : total_pages)">
                <i class="ti ti-chevron-right ti-sm"></i>
              </button>
            </li>
            @* BOTON DE IR A LA ULTIMA PAGINA *@
            <li class="page-item last">
              @* Onclick asigna el valor correspondiente a current_page *@
              <button class="page-link" type="submit"
                onclick="document.getElementById('page_number').value = @(total_pages)">
                <i class="ti ti-chevrons-right ti-sm"></i>
              </button>
            </li>
          </ul>



        </div>

      </nav>

    </div>

  </form>

</div>
<!--/ Permission Table -->


<!-- Modal -->
@await Html.PartialAsync("../_Partials/_Modals/ModalAddPermission")
@await Html.PartialAsync("../_Partials/_Modals/ModalEditPermission")
<!-- /Modal -->
