@using AspnetCoreMvcFull.Models.Mensajes
@using System.Text.Json

@{
    ViewData["Title"] = "Roles";
}

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/datatables-bs5/datatables.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/&#64;form-validation/form-validation.css" />
    <link rel="stylesheet" href="~/css/role-styles.css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

}

@section VendorScripts {
    <script src="~/vendor/libs/datatables-bs5/datatables-bootstrap5.js"></script>
    <script src="~/vendor/libs/&#64;form-validation/popular.js"></script>
    <script src="~/vendor/libs/&#64;form-validation/bootstrap5.js"></script>
    <script src="~/vendor/libs/&#64;form-validation/auto-focus.js"></script>
}

@section PageScripts {
    <script src="~/js/app-access-roles.js"></script>
    <script src="~/js/modal-add-role.js"></script>
    <script src="~/js/role-features.js"></script>
}


@* ************** Content ************** *@
<h4 class="mb-1">Lista de Roles</h4>

<p class="mb-6">
    Un rol proporciona acceso a menús y funciones predefinidos para que, dependiendo del<br> rol asignado un
    administrador puede tener acceso a lo que el usuario necesita.
</p>
<!-- Role cards -->
<form method="get" action="@Url.Action("Roles")">
    <div class="input-group mb-3">
        <input type="text" name="searchTerm" class="form-control" placeholder="Buscar rol por nombre"
               value="@Model.SearchTerm" id="searchInput" />
        <span class="input-group-text" id="clearSearch" style="cursor: pointer;">&#10005;</span>
        <!--&#10005; es el símbolo de la X  -->
        <button class="btn btn-sm btn-primary" type="submit">Buscar</button>
    </div>
</form>

<script>
    document.addEventListener("DOMContentLoaded", function () {
      const searchInput = document.getElementById("searchInput");
      const clearSearch = document.getElementById("clearSearch");

      clearSearch.addEventListener("click", function () {
        searchInput.value = ""; // Limpia el campo de búsqueda
        searchInput.form.submit(); // Envía el formulario automáticamente
      });
    });
</script>


<!-- Modal de Cambio Exitoso -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="background-color: #e0f7fa;">
            <div class="modal-header">
                <h5 class="modal-title" id="successModalLabel">Cambio Exitoso</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="successMessage">El cambio se ha realizado correctamente.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<!--Modal para la Desactivación de varios roles-->
<div class="modal fade" id="batchSuccessModal" tabindex="-1" aria-labelledby="batchSuccessModalLabel"
     aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="background-color: #e0f7fa;">
            <div class="modal-header">
                <h5 class="modal-title" id="batchSuccessModalLabel">Cambio Exitoso</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="batchSuccessMessage"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>



@model AspnetCoreMvcFull.Models.Roles.RolesViewModel //Se usa el view model para cargar los roles

<!-- Este es el Checkbox principal -->
<div class="d-flex align-items-center mb-3">
    <!-- Checkbox original -->
    <input type="checkbox" id="selectAllRoles" class="form-check-input">


    <label class="switch switch-lg">
        <input type="checkbox" id="batchDeactivateButton" class="switch-input" disabled>
        <span class="switch-toggle-slider">
            <span class="switch-on" data-state="activar">
                <i class="ti ti-check"></i>
            </span>
            <span class="switch-off" data-state="desactivar">
                <i class="ti ti-x"></i>
            </span>
        </span>
        <span class="switch-label">Activar/Desactivar</span>
    </label>
</div>


<style>

    .switch {
        margin: 0;
    }


    .switch-input:checked + .switch-toggle-slider {
        background-color: #28a745;
    }


        .switch-input:checked + .switch-toggle-slider .switch-on {
            color: white;
        }

    .switch-input:not(:checked) + .switch-toggle-slider .switch-off {
        color: #FFFFFF;
    }


    .switch-toggle-slider {
        transition: background-color 0.3s ease;
    }
</style>


<!--Aquí se manejan las tarjetas y la paginación-->
<div class="row g-6" id="roleCardsContainer">
    <div class="col-xl-4 col-lg-6 col-md-6">
        <div class="card h-100">
            <div class="row h-100">
                <div class="col-sm-5">
                    <div class="d-flex align-items-end h-100 justify-content-center mt-sm-0 mt-4">
                        <img src="~/img/illustrations/roles.png" class="img-fluid mt-sm-4 mt-md-0" alt="add-new-roles"
                             style="height: 120px; width: auto;">


                    </div>
                </div>
                <div class="col-sm-7">
                    <div class="card-body text-sm-end text-center ps-sm-0">
                        <button data-bs-target="#addRoleModal" data-bs-toggle="modal" data-context="new"
                                class="btn btn-sm btn-primary mb-4 text-nowrap add-new-role">
                            Nuevo Rol
                        </button>
                        <p class="mb-0"> Agrega un rol nuevo, <br> si no existe.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
   <script>
        document.addEventListener('DOMContentLoaded', function () {
            var switchInput = document.getElementById('batchDeactivateButton');
            var batchSuccessModal = document.getElementById('batchSuccessModal');

            // Restaurar estado al cargar la página
            if (localStorage.getItem('switchState') === 'true') {
                switchInput.checked = true;
            } else {
                switchInput.checked = false;
            }

            // Guardar estado del switch en localStorage
            switchInput.addEventListener('change', function () {
                localStorage.setItem('switchState', switchInput.checked);
            });

       
        });
    </script> 


    @if (Model.Roles != null && !Model.Roles.Any())
    {
        <div class="col-12">
            <div class="alert alert-info" role="alert">
                No hay roles disponibles. ¡Agrega uno nuevo!
            </div>
        </div>

    }
    else
    {

        @if (Model.Roles != null)
        {
            @foreach (var role in Model.Roles)
            {
                <div class="col-xl-4 col-lg-6 col-md-6 role-card" data-role-name="@role.RoleName.ToLower()">
                    <div class="card">
                        <div class="card-body position-relative">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h6 class="fw-normal mb-0 text-body">Total @role.TotalUsers usuarios</h6>
                                <input type="checkbox" class="form-check-input role-checkbox" data-role-id="@role.RoleId">
                            </div>
                            <div class="d-flex justify-content-between align-items-end">
                                <div class="role-heading">
                                    <h5 class="mb-1">@role.RoleName</h5>
                                    <div style="display: flex; align-items: center; gap: 10px;">
                                        <span style="display: inline-flex; align-items: center; gap: 5px;">
                                            <a href="javascript:;" data-bs-toggle="modal" data-bs-target="#editRoleModal"
                                               class="role-edit-modal" data-role-id="@role.RoleId"
                                               onclick="loadRoleData('@role.RoleId', '@role.RoleName', '@role.Descripcion')">
                                                Editar
                                            </a>

                                            <span>/</span>

                                            <a href="@Url.Action("ActivarDesactivar", "Access", new { idRol = role.RoleId, nameRol = role.RoleName, bloqueado = role.Bloqueado })"
                                               id="activarDesactivarRef"
                                               class="dropdown-item btn-toggle-state role-edit-modal inline-dropdown-item"
                                               data-state="@(role.Bloqueado ? "activar" : "desactivar")"
                                               data-role-id="@role.RoleId"
                                               style="color: #8176F2;">
                                                @(role.Bloqueado ? "Activar" : "Desactivar")
                                            </a>
                                        </span>




                                    </div>


                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="alert alert-info" role="alert">
                    No hay roles disponibles. ¡Agrega uno nuevo!
                </div>
            </div>
        }

    }

   

    <style>
        .inline-dropdown-item {
            display: inline-block !important;
            white-space: nowrap; /* Evita que haga salto de línea */
            vertical-align: middle; /* Asegura que esté alineado con el otro enlace */
        }
    </style>
    <script>
        const activarDesactivarBatchAccessUrl = '@Url.Action("ActivarDesactivarBatch", "Access")';
    </script>

    <!-- Paginación -->
    <div class="col-12">
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                @if (Model.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Roles", new { page = Model.CurrentPage - 1 })" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                }

                @for (var i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" href="@Url.Action("Roles", new { page = i })">@i</a>
                    </li>
                }

                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Roles", new { page = Model.CurrentPage + 1 })" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

<!-- Modal de alerta (reutilizado) -->
<div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="alertModalLabel">Título del mensaje</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body" id="alertModalBody">
                <!-- Este contenido se actualizará dinámicamente -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <a id="alertConfirmBtn" class="btn btn-danger d-none" href="#">Confirmar</a>
            </div>
        </div>
    </div>
</div>

@{
    AlertMessage? alertMessage = null;

    if (TempData["Alert"] is string alertJson)
    {
        try
        {
            alertMessage = System.Text.Json.JsonSerializer.Deserialize<AlertMessage>(alertJson);
            TempData.Remove("Alert");
        }
        catch { alertMessage = null; }
    }
}

@if (alertMessage != null)
{
    var jsonAlert = Json.Serialize(alertMessage); // serializa para usarlo en JS

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var alertData = @Html.Raw(jsonAlert);
            console.log("SCRIPT DE ALERTA ACTIVADO");
            console.log(alertData);

            var alertModalLabel = document.getElementById('alertModalLabel');
            var alertModalBody = document.getElementById('alertModalBody');
            var alertConfirmBtn = document.getElementById('alertConfirmBtn');

            alertModalLabel.textContent = (alertData.tipo.toLowerCase() === "success") ? "Éxito" : "Error";
            alertModalBody.innerHTML = alertData.mensaje;
            alertConfirmBtn.classList.add('d-none'); // por si querés ocultarlo como antes

            var alertModal = new bootstrap.Modal(document.getElementById('alertModal'));
            alertModal.show();

            document.getElementById('alertModal').addEventListener('hidden.bs.modal', function () {
                history.replaceState(null, '', window.location.pathname);
            });
        });
    </script>
}


<script>
    function loadRoleData(roleId, roleName, roleDescription) {
        // Asignamos los valores a los campos dentro del formulario con id="editRoleForm"
        document.querySelector('#editRoleForm #editRoleId').value = roleId;
        document.querySelector('#editRoleForm #editRoleName').value = roleName;
        document.querySelector('#editRoleForm #editDescripcion').value = roleDescription;
    }
</script>



<!--/ Role cards -->
<!-- Add Role Modal -->
@await Html.PartialAsync("../_Partials/_Modals/ModalAddRole")
@await Html.PartialAsync("../_Partials/_Modals/ModalEditRole")
<!-- / Add Role Modal -->
