@using AspnetCoreMvcFull.Models.Mensajes
@using System.Text.Json


@{
    ViewData["Title"] = "Modelos";
}

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/datatables-bs5/datatables.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/&#64;form-validation/form-validation.css" />
}

@section VendorScripts {
    <script src="~/vendor/libs/datatables-bs5/datatables-bootstrap5.js"></script>

    <script src="~/vendor/libs/&#64;form-validation/popular.js"></script>
    <script src="~/vendor/libs/&#64;form-validation/bootstrap5.js"></script>
    <script src="~/vendor/libs/&#64;form-validation/auto-focus.js"></script>

}

@section PageScripts {
    <script src="~/js/modelos-features.js"></script>

    <!-- Incluir jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

}

@* ************** Content ************** *@


@model AspnetCoreMvcFull.Models.Activos.ModelosViewModel

<div class="card" style="padding: 1rem 1rem 1rem 1rem;">
    <form method="get" action="@Url.Action("Modelos", "Administration")">

        <div class="col-12 px-0">
            <h4 class="mb-2" style="color:#606060;">Modelos de Activos</h4>




            <!-- FILA 1: Búsqueda + Filtros alineados -->
            <div class="row g-2 mt-1 align-items-end">
                <!-- IZQUIERDA: Búsqueda + Buscar -->
                <div class="col-md-6 d-flex align-items-end gap-2">
                    <input type="text" class="form-control"
                           placeholder="Modelo..."
                           name="search" value="@ViewBag.SearchQuery">

                    <button class="btn btn-primary w-auto" type="submit" style="font-size: 14px;">
                        Buscar
                    </button>
                </div>

                <!-- DERECHA: Select + Filtrar alineado a la derecha -->
                <div class="col-md-6 d-flex justify-content-end align-items-end gap-2">
                    @{
                        var selectedFilter = ViewBag.Filter?.ToString();
                    }

                    <select id="filterAssets" name="hasAssets" class="form-control" style="min-width: 180px;">
                        <option value="" selected="@(selectedFilter == "" ? "selected" : null)">-- Todos --</option>
                        <option value="withAssets" selected="@(selectedFilter == "withAssets" ? "selected" : null)">Con activos asignados</option>
                        <option value="withoutAssets" selected="@(selectedFilter == "withoutAssets" ? "selected" : null)">Sin activos asignados</option>
                    </select>

                    <button type="submit" class="btn btn-primary w-auto" style="white-space: nowrap;">
                        Filtrar
                    </button>
                </div>
            </div>

            <!-- FILA 2: Mostrar cantidad + Botón Agregar -->
            <div class="row g-3 mt-4 mb-4 align-items-center">
                <!-- Selector Mostrar X estados -->
                <div class="col-md-6 d-flex align-items-center">
                    @{
                        int pageSize = Int32.TryParse(ViewData["Categories_Per_Page"]?.ToString(), out int pageSizeResult) ? pageSizeResult : 10;
                    }
                    <label for="pageSize" class="me-2 mb-0">Mostrar</label>
                    <select name="pageSize" class="form-select form-select-sm w-auto h-75" onchange="this.form.submit()">
                        @{
                            for (int i = 5; i <= 20; i += 5)
                            {
                                if (i == pageSize)
                                {
                                    <option value="@i" selected>@i</option>
                                }
                                else
                                {
                                    <option value="@i">@i</option>
                                }
                            }
                        }
                    </select>
                    <span class="ms-2">modelos</span>
                    <!-- Mantener filtros -->
                    <input type="hidden" name="search" value="@ViewBag.SearchQuery" />
                    <input type="hidden" name="hasAssets" value="@ViewBag.Filter" />
                </div>

                <!-- Botón Nuevo Estado alineado a la derecha -->
                <div class="col-md-6 d-flex justify-content-md-end">
                    <button id="buttonAddStates" type="button" data-bs-target="#addModelModal" data-bs-toggle="modal" data-context="new" class="btn btn-primary" style="white-space: nowrap;"> + Nuevo Modelo </button>
                </div>
            </div>

        </div>

    </form>
    <div class="card-datatable table-responsive border" style="padding: 0.5rem 0.5rem 0.5rem 0.5rem;">
        <style>
            .card-datatable {
                border: 1px solid #dee2e6;
                border-radius: 8px;
                overflow: hidden;
                background-color: #fff;
            }

                .card-datatable table {
                    border-bottom: 1px solid #dee2e6;
                }
        </style>

        <form id="deleteBatchForm" method="post" action="@Url.Action("EliminarRegistroBatchModelos", "Administration")">
            <!-- Campo oculto donde almacenamos los IDs seleccionados -->
            <input type="hidden" id="modeloIDs" name="modeloIDs" />

            <button id="deleteBatchBtn" class="btn btn-sm mb-3" title="Borrar en batch" disabled style="background-color: #c4c4c4; border: none; border-radius: 6px; height: 28px; min-width: 40px;">
                <img src="~/img/eliminar_icono.svg" alt="Eliminar seleccionados" style="width: 16px; height: 16px;">
            </button>
        </form>

        <table class="datatables-basic table">
            <thead>
                <tr>
                    <th style="width: 5%; text-align: center;">
                        <input type="checkbox" style="transform: scale(1.5); accent-color: #ff5100;" id="select_all" />
                    </th>
                    <th class="d-none">ID</th>
                    <th style="width: 35%;">
                      Marca
                    </th>

                    <th style="width: 35%;">
                      Nombre 
                    </th>
                    <th style="width: 50%;">
                      Descripción 
                    </th>
                    <th style="width: 10%; text-align: center;">
                      Activos 
                    </th>
                    <th style="width: 20%;">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var estado in Model.Modelos)
                {
                    <tr>
                        <td class="text-center">
                            <input type="checkbox" style="transform: scale(1.5); accent-color: #ff5100;" class="checkbox-item" data-model-id="@estado.modeloID" />
                        </td>
                        <td class="d-none">@estado.modeloID</td>
                        <td>@estado.marca</td>
                        <td>@estado.name</td>
                        <td>@estado.description</td>
                        <td class="text-center">@estado.assignatedAssets</td>
                        <td>
                            <div class="d-flex justify-content-start gap-2">
                                <a data-bs-target="#addModelModal"
                                   data-bs-toggle="modal"
                                   onclick="setupEditContext(this, '@(estado.modeloID)','@(estado.marca)', '@(estado.name)', '@(estado.description)')"
                                   class="btn btn-sm btn-primary2 btn-edit"
                                   title="Editar"
                                   data-name="@estado.name" style="background-color: #00A5B8; border: none; border-radius: 6px; height: 28px; min-width: 40px;">
                                    <img src="~/img/editar_icono.svg" alt="Editar" style="width: 16px; height: 16px;">
                                </a>
                                <button class="btn d-flex align-items-center justify-content-center p-1 px-2" title="Borrar"
                                        data-bs-toggle="modal" data-bs-target="#deleteModal"
                                        data-id="@estado.modeloID"
                                        data-name="@estado.name" data-assets="@estado.assignatedAssets" style="background-color: #666666; border: none; border-radius: 6px; height: 28px; min-width: 40px;">
                                    <img src="~/img/eliminar_icono.svg" alt="Eliminar" style="width: 16px; height: 16px;">
                                </button>
                            </div>


                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @{
            //Variable que contiene el numero de categorias por pagina
            int pageSize2 = Int32.TryParse(ViewData["Categories_Per_Page"]?.ToString(), out int
            pageSizeResult2) ?
            pageSizeResult2 : 5;
        }
        <!-- Paginación -->
        <!-- Contenedor de paginación responsivo -->
        <nav aria-label="Page navigation" style="margin-top: 0.5rem;">
            <div class="d-flex justify-content-sm-end justify-content-center">


                <!-- Paginación -->
                <ul class="pagination flex-wrap justify-content-center justify-content-sm-end">
                    <!-- Ir a la primera página -->
                    @if (Model.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Modelos", new { page = 1,  pageSize = pageSize2,hasAssets = ViewContext.HttpContext.Request.Query["hasAssets"], search = ViewContext.HttpContext.Request.Query["search"] })" aria-label="First">
                                <span aria-hidden="true">&laquo;&laquo;</span>
                            </a>
                        </li>
                    }

                    <!-- Ir a la página anterior -->
                    @if (Model.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Modelos", new { page = Model.CurrentPage - 1,  pageSize = pageSize2,hasAssets = ViewContext.HttpContext.Request.Query["hasAssets"], search = ViewContext.HttpContext.Request.Query["search"] })" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    }

                    <!-- Mostrar números de páginas -->
                    @for (var i = 1; i <= Model.TotalPages; i++)
                    {
                        @if (i == 1 || i == Model.TotalPages || (i >= Model.CurrentPage - 2 && i <= Model.CurrentPage + 2))
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Modelos", new { page = i, pageSize = pageSize2, hasAssets = ViewContext.HttpContext.Request.Query["hasAssets"], search = ViewContext.HttpContext.Request.Query["search"] })">@i</a>
                            </li>
                        }

                        @if (i == Model.CurrentPage + 2 && Model.CurrentPage + 2 < Model.TotalPages)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                    }

                    <!-- Ir a la página siguiente -->
                    @if (Model.CurrentPage < Model.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Modelos", new { page = Model.CurrentPage + 1,  pageSize = pageSize2,hasAssets = ViewContext.HttpContext.Request.Query["hasAssets"], search = ViewContext.HttpContext.Request.Query["search"] })" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    }

                    <!-- Ir a la última página -->
                    @if (Model.CurrentPage < Model.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Modelos", new { page = Model.TotalPages,  pageSize = pageSize2,hasAssets = ViewContext.HttpContext.Request.Query["hasAssets"], search = ViewContext.HttpContext.Request.Query["search"] })" aria-label="Last">
                                <span aria-hidden="true">&raquo;&raquo;</span>
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </nav>
    </div>


    <div class="modal fade" id="alertModal" tabindex="-1" role="dialog" aria-labelledby="alertModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="alertModalLabel">Título</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body" id="alertModalBody">
                    <!-- Mensaje se cargará dinámicamente -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>



    @{
        AlertMessage? alertMessage = null;

        if (TempData["Alert"] is string alertJson)
        {
            try
            {
                alertMessage = System.Text.Json.JsonSerializer.Deserialize<AlertMessage>(alertJson);
                TempData.Remove("Alert");
            }
            catch { alertMessage = null; }
        }
    }

    @if (alertMessage != null)
    {
        var jsonAlert = Json.Serialize(alertMessage);

        <script>
            document.addEventListener("DOMContentLoaded", function () {
                var alertData = @Html.Raw(jsonAlert);

                var alertModalLabel = document.getElementById('alertModalLabel');
                var alertModalBody = document.getElementById('alertModalBody');

                alertModalLabel.textContent = (alertData.tipo.toLowerCase() === "success") ? "Éxito" : "Error";
                alertModalBody.innerHTML = alertData.mensaje;

                var alertModal = new bootstrap.Modal(document.getElementById('alertModal'));
                alertModal.show();

                document.getElementById('alertModal').addEventListener('hidden.bs.modal', function () {
                    window.location.href = '@Url.Content("~/Administration/Modelos")';

                });
            });
        </script>
    }

    <!-- Modal de confirmación -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="deleteModalBody">
                    <!-- Este texto se actualizará dinámicamente -->
                </div>
                <div class="modal-footer">
                    <!-- Botón para cerrar el modal -->
                    <!-- Formulario para enviar la solicitud de eliminación -->
                    <form id="deleteForm" method="get" action="@Url.Action("EliminarRegistroModelo", "Administration")" class="mb-3">
                        <!-- Enviar modeloID desde aquí como parámetro -->
                        <input type="hidden" id="modeloID" name="modeloID" />
                        <button type="submit" class="btn btn-danger">Borrar</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    </form>
                </div>
            </div>
        </div>
    </div>


    <!-- Modal de advertencia para no editable -->
    <div class="modal fade" id="nonEditableModal" tabindex="-1" aria-labelledby="nonEditableModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="nonEditableModalLabel">Edición no permitida</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="nonEditableModalBody">
                    <!-- Este texto se actualizará dinámicamente con el nombre del estado -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de alerta -->
    <div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="alertModalLabel">Mensaje</h5>
                    <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body" id="alertModalBody">
                    <!-- Aquí va el mensaje dinámico -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>

    @{
        var alertMessage2 = TempData["Alert2"] as string;
    }
    @if (!string.IsNullOrEmpty(alertMessage2))
    {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const alertModalBody = document.getElementById("alertModalBody");
                alertModalBody.textContent = "@alertMessage2";

                const alertModal = new bootstrap.Modal(document.getElementById("alertModal"));
                alertModal.show();
            });
        </script>
        TempData.Remove("Alert2");
    }

    <style>
        #alertModal .modal-header.bg-primary {
            background-color: #7961f0 !important;
        }
    </style>

</div>
<br />
<div class="card">
    <h5 class="card-header h3 mb-2">Sincronización</h5>
    <div class="card-body mb-3">
        <form asp-controller="Administration" asp-action="SincronizarModelos" method="post" enctype="multipart/form-data">
            <div class="row g-3 align-items-end">
                <div class="col-md-6">
                    <label for="excelFile" class="form-label">Subir archivo Excel (.xlsx):</label>
                    <input type="file" name="excelFile" id="excelFile" accept=".xlsx" class="form-control" required />
                </div>
                <div class="col-md-3">
                    <button type="submit" class="btn btn-primary-purple w-100">
                        <i class="fa fa-upload me-1"></i> Sincronizar Modelos
                    </button>
                </div>
            </div>
        </form>

        <div class="row mt-4">
            <div class="col-md-3">
                <a asp-controller="Administration" asp-action="DescargarPlantillaModelos" class="btn btn-outline-secondary w-100">
                    <i class="fa fa-download me-1"></i> Descargar plantilla Excel
                </a>
            </div>
        </div>
    </div>

    <style>
        .btn-primary-purple {
            background-color: #ff5100 !important;
            border-color: #ff5100 !important;
            color: white;
        }

            .btn-primary-purple:hover {
                background-color: #ff7c48 !important;
                border-color: #ff7c48 !important;
                color: white;
            }
    </style>


</div>
<script>
    const fill_selected_model_data = (id,marca, name, description) => {
        // Referencias a los elementos
        const selectMarca = document.getElementById("marca");
        const inputName = document.getElementById("name");
        const inputDescription = document.getElementById("description");
        const inputid = document.getElementById("modeloId");

        console.log("Marca recibida:", marca);

        // Verificar si la marca ya existe en las opciones del select
        let optionExists = Array.from(selectMarca.options).some(option => option.value.trim() === marca.trim());

        // Si no existe, agregarla como una nueva opción
        if (!optionExists) {
            const newOption = document.createElement("option");
            newOption.value = marca.trim();
            newOption.textContent = marca.trim();
            selectMarca.appendChild(newOption);
        }

        setTimeout(() => {
            const pisoSelect = document.getElementById("marca");
            if (pisoSelect) {
                let optionFound = false;
                for (let option of pisoSelect.options) {
                    console.log("Comparando opción:", option.textContent.trim(), "con", marca.trim());
                    if (option.textContent.split(' - ')[0].trim() === marca.trim()) {

                        option.selected = true;
                        optionFound = true;
                        break;
                    }
                }
                if (!optionFound) {
                    console.warn("No se encontró la opción en el select para:", marca);
                }
            }
        }, 100);




        // Asignar valores a los inputs
            inputid.value = id;
        inputName.value = name;
        inputDescription.value = description;

    };

        const addModelUrl = '@Url.Action("AgregarModelo", "Administration")';
        const editModelUrl = '@Url.Action("EditarModelo", "Administration")';


    function setupEditContext(element, id,marca, name, description) {
        const form = document.getElementById("addModelsForm");
        const modalTitle = document.getElementById("modalTitle");
        const saveButton = document.getElementById("saveStateButton");

        // Cambiar el contexto a "edit"
        form.setAttribute("data-context", "edit");

        // Llenar los datos seleccionados
        fill_selected_model_data(id,marca, name, description);

        // Modificar el modal en función del contexto
        if (form.getAttribute("data-context") === "edit") {
            modalTitle.textContent = "Editar Modelo"; // Cambiar el título
            saveButton.textContent = "Editar"; // Cambiar el texto del botón
                form.setAttribute("action", editModelUrl)// Cambiar la acción del formulario
        } else {
            modalTitle.textContent = "Agregar Modelo Nuevo"; // Restablecer el título
            saveButton.textContent = "Guardar"; // Restablecer el texto del botón
                     form.setAttribute("action", addModelUrl); // o addModelUrl
        // Restablecer la acción
        }
    }

    document.getElementById("newModelButton").addEventListener("click", function () {
        const form = document.getElementById("addModelsForm");
        const modalTitle = document.getElementById("modalTitle");
        const saveButton = document.getElementById("saveStateButton");

        // Configurar el modal para agregar un nuevo modelo
        form.setAttribute("data-context", "new");
        modalTitle.textContent = "Agregar Modelo Nuevo"; // Restablecer el título
        saveButton.textContent = "Guardar"; // Restablecer el texto del botón
               form.setAttribute("action", addModelUrl) // Restablecer la acción del formulario

        // Limpia los campos del formulario (opcional)
        form.reset();
    });






</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
      $(document).ready(function () {
          $('#addModelModal').on('show.bs.modal', function () {
            $.ajax({
                    url: '@Url.Action("GetMarca", "Administration")',
                type: 'GET',
                dataType: 'json',
                    success: function (data) {
                    console.log(data);
                      let select = $('#marca');
                    select.empty();
                    select.append('<option value="">Seleccione una marca</option>');

                    if (data.length === 0 || data.message) {
                        select.append('<option value="">No hay marcas disponibles</option>');
                    } else {
                         $.each(data, function (index, marca) {
        select.append('<option value="' + marca.marcaId + '">' + marca.nombre + '</option>');
    });

                    }
                },

                error: function () {
                    console.log("Error al cargar las marcas.");
                }
            });
        });
    });

</script>
@* 
@await Html.PartialAsync("../_Partials/_Modals/ModalAddModel") *@
@* @await Html.PartialAsync("../_Partials/_Modals/ModalAddBrand") *@
@await Html.PartialAsync("_GlobalModals")
