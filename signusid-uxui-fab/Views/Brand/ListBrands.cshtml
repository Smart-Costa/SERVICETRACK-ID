@{
  ViewData["Title"] = "Marcas";
}

@section VendorStyles {
  <link rel="stylesheet" href="~/vendor/libs/datatables-bs5/datatables.bootstrap5.css" />
  <link rel="stylesheet" href="~/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.css" />
  <link rel="stylesheet" href="~/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.css" />
  <link rel="stylesheet" href="~/vendor/libs/select2/select2.css">
}

@section VendorScripts {
  <script src="~/vendor/libs/datatables-bs5/datatables-bootstrap5.js"></script>
  <script src="~/vendor/libs/select2/select2.js"></script>
}

@section PageScripts {
  <script src="~/js/app-ecommerce-product-list.js"></script>
}

@* ************** Content ************** *@

@model AspnetCoreMvcFull.Controllers.BrandController.Brand[]


@* VARIABLES QUE CONTIENEN LA INFORMACION DE FILTROS DE BUSQUEDA, ORDEN DE REGISTROS Y PAGINADO DE DATOS *@
@{

  //Variable que almacena el string de busqueda por nombre
  string brand_search_input = ViewData["Brand_Search_Input"] is string brand_search_input_value ?
  brand_search_input_value : "";
  //Variable que contiene el nombre de la columna que dicta el orden
  string order_by = ViewData["Order_By"] is string order_by_value ? order_by_value : "name";
  //Variable que almacena el conteo de paginas totales
  int total_pages = Int32.TryParse(ViewData["Total_Pages"]?.ToString(), out int total_pages_result) ?
  total_pages_result : 1;
  //Variable que contiene el numero de pagina actual
  int current_page = Int32.TryParse(ViewData["Current_Page"]?.ToString(), out int current_page_result) ?
  current_page_result : 1;
  //Variable que contiene el numero de marcas por pagina
  int brands_per_page = Int32.TryParse(ViewData["Brands_Per_Page"]?.ToString(), out int
  brands_per_page_result) ?
  brands_per_page_result : 5;
  //string que almacena el string de filtrado de marcas segun activos asociados o sin activos asociados
  string brand_actives_state = ViewData["Brand_Actives_State"] is string brand_actives_state_value ?
  brand_actives_state_value : "";


}




<style>
  /* Clase para el efecto de hover de seleccion */
  .sortable-column:hover {
    background-color: #f0f0f0;
    /* Fondo gris claro */
    cursor: pointer;
    /* Cambia el cursor a mano */
  }

  /* Clase para el encabezado seleccionado */
  .sortable-column.active {
    background-color: #f0f0f0;
    /* Fondo gris para indicar selección */
    font-weight: bold;
    /* Resalta el texto */
  }
</style>





@* MODAL REGISTRAR MARCA *@

@* Script para hacer la validacion de campos del modal de registro de marca *@
<script type="text/javascript">
  document.addEventListener('DOMContentLoaded', () => {

    //Metodo para validar campos
    const check_inputs = (event) => {
      //Definicion de variables que contienen la referencia a su respectivo elemento html
      const name = document.getElementById("add_brand_name");
      const description = document.getElementById("add_brand_description");
      // Convierte el modelo de Razor a un objeto de JavaScript
      const modelDataBrands = @Html.Raw(Json.Serialize(Model));

      // Verifica si el modelo (Array de Marcas) contiene el valor del input add_brand_name para evitar repetidos
      const brand_name_exists = modelDataBrands.some(brand => {
        if (brand.name === name.value) return true;
        else return false;
      });

      //Validacion de campos no nulos o vacios
      if (!name.value || !description.value) {
        //Mostrar y personalizar mensaje de error
        document.getElementById('add_brand_error_message').style.display = 'block';
        document.getElementById('add_brand_error_message').innerHTML = 'Por favor completar todos los campos de registro.';
      } //Caso de marca repetida
      else if (brand_name_exists) {
        //Mostrar y personalizar mensaje de error
        document.getElementById('add_brand_error_message').style.display = 'block';
        document.getElementById('add_brand_error_message').innerHTML = 'No se puede agregar una marca existente.';
      }
      //Escenario de exito: Campos Válidos
      else {
        //Mostrar y personalizar mensaje de éxito
        document.getElementById('add_brand_error_message').style.display = 'block';
        document.getElementById('add_brand_error_message').innerHTML = 'Registro de marca exitoso.';
        document.getElementById('add_brand_error_message').className = 'text-success text-center';

        //Timeout para Mostrar mensaje de exito y luego hacer el envio de formulario al controller
        setTimeout(() => {
          document.getElementById('add_brand_error_message').style.display = 'none';
          document.getElementById('add_brand_form').submit();
        }, 3000);
      }
    }

    //Asignacion del metodo check_inputs al boton correspondiente
    document.getElementById("btnAdd").addEventListener('click', check_inputs);

  });
</script>


@* CUERPO DEL MODAL REGISTRAR MARCA*@
<div class="modal fade show hidden" id="addBrandModal" tabindex="-1" aria-modal="true" role="dialog"
  style="display: none; padding-left: 0px; background-color: rgba(0, 0, 0, 0.5);">

  <div class="modal-dialog modal-md modal-simple modal-dialog-centered modal-add-new-role">

    <div class="modal-content">

      <div class="modal-body">

        @* Boton para cerrar el modal y ocultar mensaje de error en caso de que se haya mostrado*@
        <button type="button" class="btn-close p-2 m-2" aria-label="Close" onclick="document.getElementById('addBrandModal').style.display='none';
          document.getElementById('add_brand_error_message').style.display = 'none';"></button>

        @* Titulo del modal *@
        <div class="text-center mb-6">
          <h4 class="role-title mb-2">Registro de Marca</h4>
        </div>

        @* Form para enviar el formulario *@
        <form asp-action="AddBrand" asp-controller="Brand" method="post" class="dt_adv_search" id="add_brand_form">


          @* div contenedor *@
          <div class="container">

            @* Primera fila donde esta el input de Nombre y Descripcion *@
            <div class="row ">

              <script>

              </script>

              <div class="col grid">
                <label for="add_brand_name">Nombre</label>
                <input type="text" class="form-control dt-input dt-full-name w-full h-auto mb-2" data-column=1
                  data-column-index="0" placeholder="" name="add_brand_name" id="add_brand_name" value="">

                <label for="add_brand_description mt-4">Descripción</label>
                <input type="text" class="form-control dt-input dt-full-name w-full h-auto" data-column=1
                  data-column-index="0" placeholder="" name="add_brand_description" id="add_brand_description" value="">
              </div>


            </div>

            @* Segunda fila con posible mensaje de error/Exito *@
            <div class="row mt-4">
              @* Mensaje en caso de error/exito al completar el formulario *@
              <p class="text-danger text-center" id="add_brand_error_message" style="display: none;">Error</p>
            </div>

            @* Tercera fila donde esta el boton de enviar formulario y de cerrar el modal *@
            <div class="row mt-2">
              <div class="col d-flex align-items-center justify-content-center">
                @* boton para enviar marca nueva al controller *@
                <button class="btn btn-primary align-self-center mx-2 w-full h-auto" id="btnAdd" type="button">
                  Enviar
                </button>
                @* Boton para cerrar modal y ocultar mensaje de error en caso de que se haya mostrado *@
                <button type="button" class="btn btn-label-secondary waves-effect w-full h-auto" onclick="document.getElementById('addBrandModal').style.display='none';
                  document.getElementById('add_brand_error_message').style.display = 'none';">
                  Cancelar
                </button>

              </div>

            </div>


          </div>

        </form>

      </div>
    </div>
  </div>
</div>



@* Script para hacer la validacion de campos del modal de editar marca *@
<script type="text/javascript">
  document.addEventListener('DOMContentLoaded', () => {

    //Metodo para validar campos
    const check_inputs_edit_brand = (event) => {
      //Definicion de variables que contienen la referencia a su respectivo elemento html
      const name = document.getElementById("edit_brand_name");
      const description = document.getElementById("edit_brand_description");

      //Validacion de campos no nulos o vacios
      if (!name.value || !description.value) {
        //Mostrar y personalizar mensaje de error
        document.getElementById('edit_brand_error_message').style.display = 'block';
        document.getElementById('edit_brand_error_message').innerHTML = 'Por favor completar todos los campos de registro.';
        console.log('error');
      }
      //Escenario de exito: Campos Válidos
      else {
        //Mostrar y personalizar mensaje de éxito
        document.getElementById('edit_brand_error_message').style.display = 'block';
        document.getElementById('edit_brand_error_message').innerHTML = 'Edición de marca exitosa.';
        document.getElementById('edit_brand_error_message').className = 'text-success text-center';

        //Timeout para Mostrar mensaje de exito y luego hacer el envio de formulario al controller
        setTimeout(() => {
          document.getElementById('edit_brand_error_message').style.display = 'none';
          document.getElementById('edit_brand_form').submit();
        }, 3000);
      }
    }



    //Asignacion del metodo check_inputs_edit_brand al boton correspondiente
    document.getElementById("btnEdit").addEventListener('click', check_inputs_edit_brand);

  });
</script>

@* CUERPO DEL MODAL EDITAR MARCA*@
<div class="modal fade show hidden" id="editBrandModal" tabindex="-1" aria-modal="true" role="dialog"
  style="display: none; padding-left: 0px; background-color: rgba(0, 0, 0, 0.5);">

  <div class="modal-dialog modal-lg modal-simple modal-dialog-centered modal-add-new-role">

    <div class="modal-content">

      <div class="modal-body">

        @* Boton para cerrar el modal y ocultar mensaje de error en caso de que se haya mostrado*@
        <button type="button" class="btn-close p-2 m-2" aria-label="Close" onclick="document.getElementById('editBrandModal').style.display='none';
          document.getElementById('edit_brand_error_message').style.display = 'none';"></button>

        @* Titulo del modal *@
        <div class="text-center mb-6">
          <h4 class="role-title mb-2">Editar Marca</h4>
        </div>

        @* Form para enviar el formulario *@
        <form asp-action="EditBrand" asp-controller="Brand" method="post" class="dt_adv_search" id="edit_brand_form">


          @* div contenedor *@
          <div class="container">

            @* Primera fila donde esta el input de Nombre y Descripcion *@
            <div class="row ">

              <div class="col grid">
                @*input oculto para guardar el nombre de la marca que se va a editar *@
                <input type="hidden" class="form-control dt-input dt-full-name w-full h-auto mb-2" data-column=1
                  data-column-index="0" placeholder="" name="brand_to_edit" id="brand_to_edit" value="">
                @* input para guardar el nombre nuevo de la marca *@
                <label for="edit_brand_name">Nombre</label>
                <input type="text" class="form-control dt-input dt-full-name w-full h-auto mb-2" data-column=1
                  data-column-index="0" placeholder="" name="edit_brand_name" id="edit_brand_name" value="">
                @* input para guardar la descripcion nueva de la marca *@
                <label for="edit_brand_description mt-4">Descripción</label>
                <input type="text" class="form-control dt-input dt-full-name w-full h-auto" data-column=1
                  data-column-index="0" placeholder="" name="edit_brand_description" id="edit_brand_description"
                  value="">
              </div>


            </div>

            @* Segunda fila con posible mensaje de error/Exito *@
            <div class="row mt-4">
              @* Mensaje en caso de error/exito al completar el formulario *@
              <p class="text-danger text-center" id="edit_brand_error_message" style="display: none;">Error</p>
            </div>

            @* Tercera fila donde esta el boton de enviar formulario y de cerrar el modal *@
            <div class="row mt-2">
              <div class="col d-flex align-items-center justify-content-center">
                @* boton para enviar marca nueva al controller *@
                <button class="btn btn-primary align-self-center mx-2 w-full h-auto" id="btnEdit" type="button">
                  Enviar
                </button>
                @* Boton para cerrar modal y ocultar mensaje de error en caso de que se haya mostrado *@
                <button type="button" class="btn btn-label-secondary waves-effect w-full h-auto" onclick="document.getElementById('editBrandModal').style.display='none';
                  document.getElementById('edit_brand_error_message').style.display = 'none';">
                  Cancelar
                </button>

              </div>

            </div>


          </div>

        </form>

      </div>
    </div>
  </div>
</div>




@* CUERPO DEL MODAL CONFIRMAR ELIMINAR*@
<div class="modal fade show hidden" id="deleteBrandConfirmationModal" tabindex="-1" aria-modal="true" role="dialog"
  style="display: none; padding-left: 0px; background-color: rgba(0, 0, 0, 0.5);">


  @* Script para comprobar que la marca que se quiere eliminar no tenga activos asignados *@
  <script>
    const check_if_brand_has_actives = () => {
      const error_message_element = document.getElementById('error_msg_label');
      const brand_actives = document.getElementById('brand_actives');
      //si Tiene activos asignados se debe mostrar un mensaje de error
      if (brand_actives.value > 0) {
        error_message_element.innerHTML = 'No se puede eliminar una marca con activos asignados';
        error_message_element.className = 'text-danger';
        error_message_element.style.display = 'inline';
        setTimeout(() => {
          error_message_element.style.display = 'none';
        }, 3000);
      } else {
        error_message_element.innerHTML = 'Eliminando marca...';
        error_message_element.className = 'text-success';
        error_message_element.style.display = 'inline';
        setTimeout(() => {
          error_message_element.style.display = 'none';
          document.getElementById('delete_brand_form').submit();
        }, 3000);
      }

    }

  </script>

  <div class="modal-dialog modal-md modal-simple modal-dialog-centered">

    <div class="modal-content">

      <div class="modal-body">

        @* Boton para cerrar el modal y ocultar mensaje de error en caso de que se haya mostrado*@
        <button type="button" class="btn-close p-2 m-2" aria-label="Close" onclick="document.getElementById('deleteBrandConfirmationModal').style.display='none';
          document.getElementById('error_msg_label').style.display = 'none';">
        </button>

        @* Titulo del modal *@
        <div class="text-center mb-6">
          <h4 class="role-title mb-2">¿Eliminar marca?</h4>
        </div>
        @* Mensaje de error *@
        <div class="text-center mb-2">
          <label id="error_msg_label" class="text-danger"
            style="display: none; margin-left: 5%; align-self: center; justify-self: center;">
            No se puede eliminar una marca con activos asignados
          </label>
        </div>



        @* Form para enviar el formulario *@
        <form asp-action="DeleteBrand" asp-controller="Brand" method="post" class="dt_adv_search"
          id="delete_brand_form">
          @* input oculto para almacenar el nombre de la marca para ser enviado al controller *@
          <input type="hidden" name="brand_name" id="brand_name" value="" />
          @* Input oculto solo para almacenar la cantiadad de activos de la marca seleccionada para confirmar si se puede eliminar *@
          <input type="hidden" id="brand_actives" value="" />

          @* div contenedor *@
          <div class="container mt-12 justify-content-center">

            @* Primera fila donde esta el Boton de confirmar y Cancelar *@
            <div class="row" style="justify-self: center;">
              <div class="col">
                <button type="button" class="btn btn-primary w-full h-auto" onclick="check_if_brand_has_actives();">
                  Confirmar
                </button>
              </div>

              <div class="col">
                <button type="button" class="btn btn-secondary w-full h-auto" onclick="
                document.getElementById('deleteBrandConfirmationModal').style.display = 'none';
                document.getElementById('error_msg_label').style.display = 'none';">
                  Cancelar
                </button>
              </div>
            </div>

          </div>

        </form>

      </div>
    </div>
  </div>
</div>


@* CUERPO DEL MODAL CONFIRMAR ELIMINAR MULTIPLES MARCAS*@
<div class="modal fade show hidden" id="deleteBrandsConfirmationModal" tabindex="-1" aria-modal="true" role="dialog"
  style="display: none; padding-left: 0px; background-color: rgba(0, 0, 0, 0.5);">


  @* Script para comprobar que las marcas que se quieren eliminar no tengan activos asignados *@
  <script>
    const check_if_brands_has_actives = () => {

      //Obtener el value de todas last checkbox que estan marcadas
      const checkboxes = document.querySelectorAll('.checked-checkbox');
      let allActivesCount = 0;
      checkboxes.forEach(checkbox => {
        allActivesCount += Number(checkbox.value.split(',')[1]);
      });
      const error_message_element = document.getElementById('error_msg_label_for_brands');

      //si alguna marca tiene activos asignados se debe mostrar un mensaje de error
      if (allActivesCount > 0) {
        error_message_element.innerHTML = 'No se puede eliminar una marca con activos asignados';
        error_message_element.className = 'text-danger';
        error_message_element.style.display = 'inline';
        setTimeout(() => {
          error_message_element.style.display = 'none';
        }, 3000);
      } else {
        error_message_element.innerHTML = 'Eliminando marcas...';
        error_message_element.className = 'text-success';
        error_message_element.style.display = 'inline';

        //Asignar los nombres de las marcas seleccionadas al input oculto que llega al controller
        let brands_names_string = '';
        //los nombres pasan al controller en forma de strin que sigue la siguiente estructura:
        // nombre_de_marca$nombre_de_marca$nombre_de_marca$nombre_de_marca$
        // para que en el controller se pueda hacer un split y Obtener un Array de nombres
        checkboxes.forEach(checkbox => brands_names_string += `${checkbox.value.split(',')[0]}$`);
        document.getElementById('brands_names_string').value = brands_names_string;


        setTimeout(() => {
          error_message_element.style.display = 'none';
          document.getElementById('delete_brands_form').submit();
        }, 3000);
      }


    }

  </script>



  <div class="modal-dialog modal-md modal-simple modal-dialog-centered">

    <div class="modal-content">

      <div class="modal-body">

        @* Boton para cerrar el modal y ocultar mensaje de error en caso de que se haya mostrado*@
        <button type="button" class="btn-close p-2 m-2" aria-label="Close" onclick="document.getElementById('deleteBrandsConfirmationModal').style.display='none';
          document.getElementById('error_msg_label_for_brands').style.display = 'none';">
        </button>

        @* Titulo del modal *@
        <div class="text-center mb-6">
          <h4 class="role-title mb-2">¿Eliminar marcas seleccionadas?</h4>
        </div>
        @* Mensaje de error *@
        <div class="text-center mb-2">
          <label id="error_msg_label_for_brands" class="text-danger"
            style="display: none; margin-left: 5%; align-self: center; justify-self: center;">
            No se puede eliminar una marca con activos asignados
          </label>
        </div>



        @* Form para enviar el formulario *@
        <form asp-action="DeleteMultipleBrands" asp-controller="Brand" method="post" class="dt_adv_search"
          id="delete_brands_form">
          @* input oculto para almacenar el nombre de las marcas para ser enviado al controller *@
          <input type="hidden" name="brands_names_string" id="brands_names_string" value="" />

          @* div contenedor *@
          <div class="container mt-12 justify-content-center">

            @* Primera fila donde esta el Boton de confirmar y Cancelar *@
            <div class="row" style="justify-self: center;">
              <div class="col">
                <button type="button" class="btn btn-primary w-full h-auto" onclick="check_if_brands_has_actives();">
                  Confirmar
                </button>
              </div>

              <div class="col">
                <button type="button" class="btn btn-secondary w-full h-auto" onclick="
                document.getElementById('deleteBrandsConfirmationModal').style.display = 'none';
                document.getElementById('error_msg_label_for_brands').style.display = 'none';">
                  Cancelar
                </button>
              </div>
            </div>

          </div>

        </form>

      </div>
    </div>
  </div>
</div>

<!-- brand Table -->

<div class="card">

  <link rel="stylesheet" href="@Url.Content("~/css/site.css")" />
  @* Script para manejar el check masivo
    Si la checkbox principal se marca, todas las demas tambien
    Si alguna checkbox de empleado no esta marcada, la checkbox principal tampoco lo va a estar *@
  <script>
    document.addEventListener('DOMContentLoaded', () => {

      // Seleccionar los elementos necesarios
      const selectAllCheckbox = document.getElementById('select_all');
      const checkboxes = document.querySelectorAll('.checkbox-item');

      const delete_brands_button = document.getElementById('delete_brands_button');

      // Función para verificar si al menos una checkbox está seleccionada para activar el boton de desactivar en batch
      const updateDisableBrandsButtonState = () => {
        const isAnyChecked = Array.from(checkboxes).some(checkbox => checkbox.checked);
        delete_brands_button.disabled = !isAnyChecked;
      }


      // Event listener para la checkbox de selección masiva
      selectAllCheckbox.addEventListener("change", () => {
        const isChecked = selectAllCheckbox.checked;
        checkboxes.forEach(checkbox => {
          if (isChecked) {
            //Si se marcan last casillas items mediante el select masivo, se agrega la respectiva clase a casilla item
            checkbox.className = 'checkbox-item checked-checkbox';
          } else {
            checkbox.className = 'checkbox-item';
          }
          checkbox.checked = isChecked;
        });
        updateDisableBrandsButtonState();
      });



      // Event listener para las checkboxes individuales
      checkboxes.forEach(checkbox => {
        //Event listener para Desmarcar la casilla de check masivo si alguna de las casillas estan desmarcada
        checkbox.addEventListener('change', () => {
          if (!checkbox.checked) {
            selectAllCheckbox.checked = false; // Desmarcar el principal
          } else if (Array.from(checkboxes).every(cb => cb.checked)) {
            selectAllCheckbox.checked = true; // Marcar el principal si todos están seleccionados
          }
          updateDisableBrandsButtonState();
        });

      });

    });

  </script>




  @* Form para enviar la solicitud de busqueda al Controller segun los filtros ingresados*@
  <form asp-action="ListBrands" asp-controller="Brand" method="get" class="dt_adv_search" id="search_form">

    <div class="card-body">


      @* FILTROS DE BUSQUEDA Y BOTONES *@
      <div class="row">
        <div class="col-12">



          @* Filtro de cantidad de Marcas *@
          <div class="row g-3 mt-1 ">

            @* Filtro de cantidad de Marcas a mostrar *@
            <div class="col d-flex align-items-center">

              <label for="brands_per_page" class="me-2">Mostrar</label>
              <select name="brands_per_page" class="form-select form-select-sm w-auto h-75">
                @* SE ITERA PARA CREAR LAS OPCIONES DE PAGINADO Y SE IDENTIFICA SI UNA OPCION YA ESTABA SELECCIONADA
                      ANTERIORMENTE PARA DEJAR ESA OPCION ACTIVA *@
                @{
                  for (int i = 5; i <= 20; i = i + 5)
                  {
                    if (i == brands_per_page)
                    {
                      <option value="@i" selected>@i</option>
                    }
                    else
                    {
                      <option value="@i">@i</option>
                    }

                  }
                }
              </select>
              <span class="ms-2">marcas</span>
            </div>
          </div>


          @* Input de busqueda de marcas y botones buscar*@
          <div class="row mt-1 " style="display: flex; justify-content: end;">

            @* input de busqueda *@
            <div class="col-xl-3 col-md-5 col-sm-12 d-flex justify-content-end align-items-center mt-2 g-0 mx-0">
              <input type="text" class="form-control dt-input dt-full-name w-full h-auto" style="margin-right: 5%;"
                data-column=1 data-column-index="0" placeholder="Marca..." name="brand_search_input"
                value="@(brand_search_input)">
            </div>


            @* botones *@
            <div class="col-xl-3 col-md-3 col-sm-12 d-flex justify-content-end align-items-center mt-2">
              @* boton buscar *@
              <button class="btn btn-primary align-self-center mx-2 w-auto h-auto" id="btnSearch">
                Buscar
              </button>
              @* boton de agregar marca *@
              <button type="button" class="btn btn-primary align-self-center mx-1 w-auto h-auto" id="add_brand_button"
                onclick="document.getElementById('addBrandModal').style.display='block';
                document.getElementById('add_brand_name').value = '';
                document.getElementById('add_brand_description').value = '';">
                <i class="fa-solid fa-plus fa-sm m-lg-1"></i> Agregar Marca
              </button>

            </div>

          </div>

          @* Boton eliminar marcas seleccionadas *@
          <div class="row g-3 mt-1" style="justify-content: space-between;">

            <button type="button" disabled class="btn btn-primary align-self-center mx-2 w-auto h-auto"
              id="delete_brands_button"
              onclick="document.getElementById('deleteBrandsConfirmationModal').style.display='block';">
              Eliminar seleccionados
            </button>

            @* Seleccion de marcas con activos o sin activos *@
            <select name="brand_actives_state" class="form-select form-select-sm w-auto h-100 mx-2">
              @{

                if (brand_actives_state == "with_actives")
                {
                  <option value="estatus"> Estatus </option>
                  <option value="with_actives" selected> Con Activos </option>
                  <option value="without_actives"> Sin Activos </option>
                }
                else if (brand_actives_state == "without_actives")
                {
                  <option value="estatus"> Estatus </option>
                  <option value="with_actives"> Con Activos </option>
                  <option value="without_actives" selected> Sin Activos </option>
                }
                else
                {
                  <option value="estatus" selected> Estatus </option>
                  <option value="with_actives"> Con Activos </option>
                  <option value="without_actives"> Sin Activos </option>
                }

              }

            </select>
          </div>


        </div>
      </div>

    </div>


    @* Tabla de los marcas *@
    <div class="card-datatable table-responsive">
      <table class="dt-advanced-search table">

        <script>
          const fill_selected_brand_data = (name, description) => {

            //Definicion de variables que contienen la referencia a su respectivo elemento html
            document.getElementById("brand_to_edit").value = name;
            document.getElementById("edit_brand_name").value = name;
            document.getElementById("edit_brand_description").value = description;

            document.getElementById('editBrandModal').style.display = 'block';

          }


          //METODO QUE SEGUN EL CAMPO CAMBIA EL ORDEN DE LOS REGISTROS A ASCENDENTE O DESCENDENTE
          const change_orderby = (columnName) => {
            const current_orderby_value = document.getElementById('order_by').value;
            if (current_orderby_value === `${columnName}_ascending`) {
              document.getElementById('order_by').value = `${columnName}_descending`;
            } else {
              document.getElementById('order_by').value = `${columnName}_ascending`;
            }
            document.getElementById('btnSearch').click();
          }

        </script>



        @* Titulos de las columnas de la tabla *@
        <thead>
          <tr>

            @* INPUT OCULTO QUE ALMACENA EL ORDEN DE LA LISTA PARA ENVIAR AL FORMULARIO *@
            <input type="hidden" id="order_by" name="order_by" value="@order_by" />



            @* CHECKBOX PARA REALIZAR LA SELECCION MASIVA *@
            <th><input type="checkbox" id="select_all" class="every-checkbox"> </th>

            @* Se consulta si el orden por nombre ya estaba asignado
                para asignar el estilo de columna representativa del orden

                 Si no existe ningun valor en order_by se asigna a nombre *@
            <th class=" sortable-column cursor-pointer sortable-column cursor-pointer
                @(order_by == "name_ascending" || order_by == "name_descending"
                ? "active"
                : ""
                )" onclick="change_orderby('name')">
              Nombre
              @{
                //Dependiendo del orden se carga el icono de la flecha hacia arriba o hacia abajo
                if (order_by == "name_ascending")
                {
                  <span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                      class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-down">
                      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                      <path d="M12 5l0 14" />
                      <path d="M18 13l-6 6" />
                      <path d="M6 13l6 6" />
                    </svg>
                  </span>
                }
                else if (order_by == "name_descending")
                {
                  <span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                      class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-up">
                      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                      <path d="M12 5l0 14" />
                      <path d="M18 11l-6 -6" />
                      <path d="M6 11l6 -6" />
                    </svg>
                  </span>
                }

              }

            </th>


            <th>
              Descripción
            </th>

            <th>
              activos asignados
            </th>

            <th>
              Acciones
            </th>



          </tr>
        </thead>


        @* Listado de los Marcas del Model en la tabla *@
        <tbody class="table-border-bottom-0">

          @* Se hace loop en el Model que contiene la lista de marcas y se crean las entradas en la tabla *@
          @{

            foreach (var brand in Model)
            {
              <tr>

                <td>
                  <input type="checkbox" class="checkbox-item" id="checkbox_for_@(brand.Name)"
                    value="@brand.Name,@brand.Actives" onchange="
                                      if(document.getElementById('checkbox_for_@(brand.Name)').checked){
                                        document.getElementById('checkbox_for_@(brand.Name)').className = 'checkbox-item checked-checkbox';
                                      }else{
                                        document.getElementById('checkbox_for_@(brand.Name)').className = 'checkbox-item';
                                      }" />
                </td>

                <td class="w-20">
                  @brand.Name
                </td>

                <td class="w-50">
                  @(brand.Description)
                </td>

                <td class="w-20">
                  @(brand.Actives)
                </td>

                @* Botones para editar/eliminar marca *@
                <td class="w-10">
                  <div class="d-flex justify-content-start">
                    @* Boton de editar que llama al metodo para llenar los campos del modal de registro
                      con la data de la marca seleccionada*@
                    <a class="dropdown-item waves-effect w-auto" id="edit_btn"
                      onclick="fill_selected_brand_data('@(brand.Name)','@(brand.Description)');">
                      <i class="ti ti-pencil me-1"></i>
                    </a>
                    @* Menu dropdown donde esta la opcion de borrar *@
                    <div class="dropdown">
                      <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                        <i class="ti ti-dots-vertical"></i>
                      </button>

                      <div class="dropdown-menu">
                        <a class="dropdown-item" onclick="document.getElementById('deleteBrandConfirmationModal').style.display='block';
                                            document.getElementById('brand_actives').value = '@(brand.Actives)'
                                            document.getElementById('brand_name').value = '@(brand.Name)'">
                          <i class="ti ti-trash me-1"></i> Eliminar

                        </a>
                      </div>
                    </div>

                  </div>

                </td>

              </tr>

            }

          }


        </tbody>
      </table>

      @* Si no se encuentran Marcas en el Model (Array de Marcas), se muestra este mensaje*@
      @{

        if (Model.Length == 0)
        {
          <div class="d-flex justify-content-center">
            <label class="mt-10">No se encontraron marcas</label>
          </div>
        }

      }


      @* Paginacion *@
      <nav aria-label="Page navigation">
        <div class="d-flex flex-row-reverse m-lg-3">

          @* CAMPO OCULTO QUE ALMACENA EL NUMERO DE LA PAGINA SELECCIONADA PARA ENVIAR AL FORMULARIO *@
          <input type="hidden" id="page_number" name="page_number" value="@(current_page)" />


          @* LISTA CON LOS BOTONES DE PAGINACION *@

          <ul class="pagination pagination-rounded">
            @* BOTON DE VOLVER A LA PRIMERA PAGINA *@
            <li class="page-item first">
              @* Onclick asigna el valor correspondiente a current_page *@
              <button class="page-link" type="submit" onclick="document.getElementById('page_number').value = 1"><i
                  class="ti ti-chevrons-left ti-sm"></i></button>
            </li>
            @* BOTON DE VOLVER A LA PAGINA ANTERIOR *@
            <li class="page-item prev">
              @* Onclick asigna el valor correspondiente a current_page *@
              <button class="page-link" type="submit"
                onclick="document.getElementById('page_number').value = @(current_page > 1 ? current_page - 1 : 1)">
                <i class="ti ti-chevron-left ti-sm"></i>
              </button>
            </li>

            @* LOOP PARA CREAR LOS BOTONES DE PAGINACION
                SE CREA LA PAGINA ACTUAL Y LAS DOS SIGUIENTES*@
            @{

              for (int i = current_page; i <= current_page + 2; i++)
              {
                @* Solo si i es menor o igual a las paginas totales se crea el objeto <li>  *@
                if (i <= total_pages)
                {
                  @* Si la pagina actual coincide con i, significa que es la pagina actual correspondiente y se asigna la clase al <li> *@
                  <li class="page-item @(current_page == i ? "active": "")">
                    <button class="page-link" type="submit"
                      onclick="document.getElementById('page_number').value = @i">@i</button>
                  </li>
                }

              }
            }

            @* BOTON DE IR A LA PAGINA SIGUIENTE *@
            <li class="page-item next">
              @* Onclick asigna el valor correspondiente a current_page *@
              <button class="page-link" type="submit"
                onclick="document.getElementById('page_number').value = @(current_page < total_pages ? current_page + 1 : total_pages)">
                <i class="ti ti-chevron-right ti-sm"></i>
              </button>
            </li>
            @* BOTON DE IR A LA ULTIMA PAGINA *@
            <li class="page-item last">
              @* Onclick asigna el valor correspondiente a current_page *@
              <button class="page-link" type="submit"
                onclick="document.getElementById('page_number').value = @(total_pages)">
                <i class="ti ti-chevrons-right ti-sm"></i>
              </button>
            </li>
          </ul>



        </div>

      </nav>

    </div>

  </form>

</div>
<!--/ brand Table -->
